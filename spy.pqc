void (entity spy) TeamFortress_SpyCalcName;
void () TeamFortress_SpyUndercoverThink;
void () GasGrenadeMakeGas;
void () T_TranqDartTouch;

void () spy_diea1 = [ 50, spy_diea2 ]
{
};

void () spy_diea2 = [ 51, spy_diea3 ]
{
};

void () spy_diea3 = [ 52, spy_diea4 ]
{
};

void () spy_diea4 = [ 53, spy_diea5 ]
{
};

void () spy_diea5 = [ 54, spy_diea6 ]
{
};

void () spy_diea6 = [ 55, spy_diea7 ]
{
};

void () spy_diea7 = [ 56, spy_diea8 ]
{
};

void () spy_diea8 = [ 57, spy_diea9 ]
{
};

void () spy_diea9 = [ 58, spy_diea10 ]
{
};

void () spy_diea10 = [ 59, spy_diea11 ]
{
};

void () spy_diea11 = [ 60, spy_diea11 ]
{
};

void () spy_dieb1 = [ 61, spy_dieb2 ]
{
};

void () spy_dieb2 = [ 62, spy_dieb3 ]
{
};

void () spy_dieb3 = [ 63, spy_dieb4 ]
{
};

void () spy_dieb4 = [ 64, spy_dieb5 ]
{
};

void () spy_dieb5 = [ 65, spy_dieb6 ]
{
};

void () spy_dieb6 = [ 66, spy_dieb7 ]
{
};

void () spy_dieb7 = [ 67, spy_dieb8 ]
{
};

void () spy_dieb8 = [ 68, spy_dieb9 ]
{
};

void () spy_dieb9 = [ 69, spy_dieb9 ]
{
};

void () spy_diec1 = [ 70, spy_diec2 ]
{
};

void () spy_diec2 = [ 71, spy_diec3 ]
{
};

void () spy_diec3 = [ 72, spy_diec4 ]
{
};

void () spy_diec4 = [ 73, spy_diec5 ]
{
};

void () spy_diec5 = [ 74, spy_diec6 ]
{
};

void () spy_diec6 = [ 75, spy_diec7 ]
{
};

void () spy_diec7 = [ 76, spy_diec8 ]
{
};

void () spy_diec8 = [ 77, spy_diec9 ]
{
};

void () spy_diec9 = [ 78, spy_diec10 ]
{
};

void () spy_diec10 = [ 79, spy_diec11 ]
{
};

void () spy_diec11 = [ 80, spy_diec12 ]
{
};

void () spy_diec12 = [ 81, spy_diec13 ]
{
};

void () spy_diec13 = [ 82, spy_diec14 ]
{
};

void () spy_diec14 = [ 83, spy_diec15 ]
{
};

void () spy_diec15 = [ 84, spy_diec15 ]
{
};

void () spy_died1 = [ 85, spy_died2 ]
{
};

void () spy_died2 = [ 86, spy_died3 ]
{
};

void () spy_died3 = [ 87, spy_died4 ]
{
};

void () spy_died4 = [ 88, spy_died5 ]
{
};

void () spy_died5 = [ 89, spy_died6 ]
{
};

void () spy_died6 = [ 90, spy_died7 ]
{
};

void () spy_died7 = [ 91, spy_died8 ]
{
};

void () spy_died8 = [ 92, spy_died9 ]
{
};

void () spy_died9 = [ 93, spy_died9 ]
{
};

void () spy_diee1 = [ 94, spy_diee2 ]
{
};

void () spy_diee2 = [ 95, spy_diee3 ]
{
};

void () spy_diee3 = [ 96, spy_diee4 ]
{
};

void () spy_diee4 = [ 97, spy_diee5 ]
{
};

void () spy_diee5 = [ 98, spy_diee6 ]
{
};

void () spy_diee6 = [ 99, spy_diee7 ]
{
};

void () spy_diee7 = [ 100, spy_diee8 ]
{
};

void () spy_diee8 = [ 101, spy_diee9 ]
{
};

void () spy_diee9 = [ 102, spy_diee9 ]
{
};

void () spy_die_ax1 = [ 41, spy_die_ax2 ]
{
};

void () spy_die_ax2 = [ 42, spy_die_ax3 ]
{
};

void () spy_die_ax3 = [ 43, spy_die_ax4 ]
{
};

void () spy_die_ax4 = [ 44, spy_die_ax5 ]
{
};

void () spy_die_ax5 = [ 45, spy_die_ax6 ]
{
};

void () spy_die_ax6 = [ 46, spy_die_ax7 ]
{
};

void () spy_die_ax7 = [ 47, spy_die_ax8 ]
{
};

void () spy_die_ax8 = [ 48, spy_die_ax9 ]
{
};

void () spy_die_ax9 = [ 49, spy_die_ax9 ]
{
};

void () spy_upb1 = [ 69, spy_upb2 ]
{
};

void () spy_upb2 = [ 68, spy_upb3 ]
{
};

void () spy_upb3 = [ 67, spy_upb4 ]
{
};

void () spy_upb4 = [ 66, spy_upb5 ]
{
};

void () spy_upb5 = [ 65, spy_upb6 ]
{
};

void () spy_upb6 = [ 64, spy_upb7 ]
{
};

void () spy_upb7 = [ 63, spy_upb8 ]
{
};

void () spy_upb8 = [ 62, spy_upb9 ]
{
};

void () spy_upb9 = [ 61, spy_upb9 ]
{
	player_stand1 ();
};

void () spy_upc1 = [ 84, spy_upc2 ]
{
};

void () spy_upc2 = [ 83, spy_upc3 ]
{
};

void () spy_upc3 = [ 82, spy_upc4 ]
{
};

void () spy_upc4 = [ 81, spy_upc5 ]
{
};

void () spy_upc5 = [ 80, spy_upc6 ]
{
};

void () spy_upc6 = [ 79, spy_upc7 ]
{
};

void () spy_upc7 = [ 78, spy_upc8 ]
{
};

void () spy_upc8 = [ 77, spy_upc9 ]
{
};

void () spy_upc9 = [ 76, spy_upc10 ]
{
};

void () spy_upc10 = [ 75, spy_upc11 ]
{
};

void () spy_upc11 = [ 74, spy_upc12 ]
{
};

void () spy_upc12 = [ 73, spy_upc13 ]
{
};

void () spy_upc13 = [ 72, spy_upc14 ]
{
};

void () spy_upc14 = [ 71, spy_upc15 ]
{
};

void () spy_upc15 = [ 70, spy_upc15 ]
{
	player_stand1 ();
};

void () spy_upd1 = [ 93, spy_upd2 ]
{
};

void () spy_upd2 = [ 92, spy_upd3 ]
{
};

void () spy_upd3 = [ 91, spy_upd4 ]
{
};

void () spy_upd4 = [ 90, spy_upd5 ]
{
};

void () spy_upd5 = [ 89, spy_upd6 ]
{
};

void () spy_upd6 = [ 88, spy_upd7 ]
{
};

void () spy_upd7 = [ 87, spy_upd8 ]
{
};

void () spy_upd8 = [ 86, spy_upd9 ]
{
};

void () spy_upd9 = [ 85, spy_upd9 ]
{
	player_stand1 ();
};

void () spy_upe1 = [ 94, spy_upe9 ]
{
};
void () spy_upe9;

void () spy_upe2 = [ 95, spy_upe8 ]
{
};
void () spy_upe8;

void () spy_upe3 = [ 96, spy_upe7 ]
{
};
void () spy_upe7;

void () spy_upe4 = [ 97, spy_upe6 ]
{
};
void () spy_upe6;

void () spy_upe5 = [ 98, spy_upe5 ]
{
};

void () spy_upe6 = [ 99, spy_upe4 ]
{
};

void () spy_upe7 = [ 100, spy_upe3 ]
{
};

void () spy_upe8 = [ 101, spy_upe2 ]
{
};

void () spy_upe9 = [ 102, spy_upe1 ]
{
	player_stand1 ();
};

void () spy_upaxe1 = [ 49, spy_upaxe2 ]
{
};

void () spy_upaxe2 = [ 48, spy_upaxe3 ]
{
};

void () spy_upaxe3 = [ 47, spy_upaxe4 ]
{
};

void () spy_upaxe4 = [ 46, spy_upaxe5 ]
{
};

void () spy_upaxe5 = [ 45, spy_upaxe6 ]
{
};

void () spy_upaxe6 = [ 44, spy_upaxe7 ]
{
};

void () spy_upaxe7 = [ 43, spy_upaxe8 ]
{
};

void () spy_upaxe8 = [ 42, spy_upaxe9 ]
{
};

void () spy_upaxe9 = [ 41, spy_upaxe9 ]
{
	player_stand1 ();
};

void () TeamFortress_SpyFeignDeath =
{
	local float i;
	local entity at_spot;

	if (self.is_feigning)
	{
		at_spot = findradius (self.origin, 64);
		i = TF_FLARE_OFF;
		while ((at_spot != world))
		{
			if ((((at_spot.classname == "player") && (at_spot.deadflag == TF_FLARE_LIT)) && (self != at_spot)))
			{
				i = TF_FLARE_LIT;
			}
			at_spot = at_spot.chain;
		}
		if ((i == TF_FLARE_OFF))
		{
			i = (TF_FLARE_OFF + floor ((random () * BOT_AI_GRAPPLE)));
			self.velocity = '0 0 0';
			setsize (self, VEC_HULL_MIN, VEC_HULL_MAX);
			self.view_ofs = '0 0 22';
			self.movetype = BOT_AI_FOLLOW;
			self.is_feigning = TF_FLARE_LIT;
			self.current_weapon = self.weapon;
			W_SetCurrentAmmo ();
			self.tfstate = (self.tfstate - (self.tfstate & 65536));
			TeamFortress_SetSpeed (self);
			if ((self.weapon <= BOT_RESUPPLYING))
			{
				spy_upaxe1 ();
				return;
			}
			if ((i == TF_FLARE_OFF))
			{
				spy_upb1 ();
			}
			else
			{
				if ((i == BOT_FIGHTING))
				{
					spy_upc1 ();
				}
				else
				{
					if ((i == BOT_AI_FOLLOW))
					{
						spy_upd1 ();
					}
					else
					{
						spy_upe1 ();
					}
				}
			}
		}
		else
		{
			sprint (self, BOT_FIGHTING, "You can't get up while someone\nis standing on you.\n");
		}
	}
	else
	{
		if ((!(self.flags & FL_ONGROUND) && (self.waterlevel == TF_FLARE_LIT)))
		{
			sprint (self, BOT_FIGHTING, "You can't feign in the air.\n");
			return;
		}
		at_spot = findradius (self.origin, 64);
		while ((at_spot != world))
		{
			if ((((at_spot.classname == "player") && (self != at_spot)) && (at_spot.is_feigning == TF_FLARE_OFF)))
			{
				sprint (self, BOT_FIGHTING, "You can't feign on top of another spy!\n");
			}
			at_spot = at_spot.chain;
		}
		self.immune_to_check = (time + BOT_FIGHTING);
		self.tfstate = (self.tfstate | 65536);
		TeamFortress_SetSpeed (self);
		self.is_feigning = TF_FLARE_OFF;
		Attack_Finished (0.8);
		if (self.hook_out)
		{
			Reset_Grapple (self.hook);
			Attack_Finished (0.75);
			self.hook_out = TF_FLARE_OFF;
		}
		if (((self.undercover_team == TF_FLARE_LIT) && (self.undercover_skin == TF_FLARE_LIT)))
		{
			self.items = (self.items - (self.items & IT_INVISIBILITY));
		}
		self.invisible_finished = TF_FLARE_LIT;
		self.modelindex = modelindex_player;
		self.weapon = self.current_weapon;
		self.current_weapon = TF_FLARE_LIT;
		self.weaponmodel = "";
		self.weaponframe = TF_FLARE_LIT;
		setsize (self, VEC_HULL_MIN, '16 16 4');
		self.view_ofs = '0 0 4';
		self.movetype = BOT_AI_FLEE;
		DeathSound ();
		self.angles_x = TF_FLARE_LIT;
		self.angles_z = TF_FLARE_LIT;
		if ((self.weapon <= BOT_RESUPPLYING))
		{
			spy_die_ax1 ();
			return;
		}
		i = (TF_FLARE_OFF + floor ((random () * BOT_AI_FLEE)));
		if ((i == TF_FLARE_OFF))
		{
			spy_diea1 ();
		}
		else
		{
			if ((i == BOT_FIGHTING))
			{
				spy_dieb1 ();
			}
			else
			{
				if ((i == BOT_AI_FOLLOW))
				{
					spy_diec1 ();
				}
				else
				{
					if ((i == BOT_MOVING))
					{
						spy_died1 ();
					}
					else
					{
						spy_diee1 ();
					}
				}
			}
		}
	}
};

void () TeamFortress_SpyGoUndercover =
{
	local entity te;

	if ((self.effects & (BOT_DEFEND | BOT_MOVING)))
	{
		sprint (self, TF_FLARE_OFF, "You cannot disguise while glowing.\n");
		return;
	}
	if ((invis_only == TF_FLARE_OFF))
	{
		if ((self.is_undercover == TF_FLARE_OFF))
		{
			self.is_undercover = TF_FLARE_LIT;
			self.modelindex = modelindex_player;
			self.items = (self.items - (self.items & IT_INVISIBILITY));
		}
		else
		{
			if ((self.is_undercover == BOT_FIGHTING))
			{
				sprint (self, BOT_FIGHTING, "You stop going undercover.\n");
				self.is_undercover = TF_FLARE_LIT;
			}
			else
			{
				if ((self.ammo_cells > TF_FLARE_OFF))
				{
					sprint (self, BOT_FIGHTING, "Going undercover...\n");
					self.is_undercover = BOT_FIGHTING;
					te = spawn ();
					te.classname = "timer";
					te.owner = self;
					te.think = TeamFortress_SpyUndercoverThink;
					te.nextthink = (time + BOT_MOVING);
				}
			}
		}
		self.StatusRefreshTime = (time + 0.1);
	}
	else
	{
		if ((self.is_undercover != BOT_FIGHTING))
		{
			self.current_menu = 12;
			self.menu_count = 25;
		}
		else
		{
			sprint (self, BOT_FIGHTING, "You stop going undercover.\n");
			self.is_undercover = TF_FLARE_LIT;
		}
	}
};

void (entity spy) TeamFortress_SpyCalcName =
{
	local entity te;

	spy.undercover_name = string_null;
	if ((spy.undercover_team != TF_FLARE_LIT))
	{
		te = find (world, classname, "player");
		while (te)
		{
			if (((te.team_no == spy.undercover_team) && (te.skin == spy.undercover_skin)))
			{
				spy.undercover_name = te.netname;
				te = world;
			}
			else
			{
				te = find (te, classname, "player");
			}
		}
		if ((spy.undercover_name == string_null))
		{
			te = find (world, classname, "player");
			while (te)
			{
				if ((te.team_no == spy.undercover_team))
				{
					spy.undercover_name = te.netname;
					te = world;
				}
				else
				{
					te = find (te, classname, "player");
				}
			}
		}
	}
};

void () TeamFortress_SpyUndercoverThink =
{
	local float tc;
	local string st;

	if ((self.owner.playerclass != BOT_DEFEND))
	{
		return;
	}
	if ((self.owner.is_undercover == BOT_FIGHTING))
	{
		self.owner.items = (self.owner.items | IT_INVISIBILITY);
		if ((invis_only == TF_FLARE_OFF))
		{
			self.owner.frame = TF_FLARE_LIT;
			self.owner.modelindex = modelindex_eyes;
			self.owner.is_undercover = TF_FLARE_OFF;
		}
		else
		{
			self.owner.immune_to_check = (time + BOT_MOVING);
			if ((self.skin != TF_FLARE_LIT))
			{
				sprint (self.owner, BOT_FIGHTING, "Skin set to ");
				TeamFortress_PrintClassName (self.owner, self.skin, TF_FLARE_LIT);
				self.owner.undercover_skin = self.skin;
				TeamFortress_SetSkin (self.owner);
			}
			if ((self.team != TF_FLARE_LIT))
			{
				sprint (self.owner, BOT_FIGHTING, "Colors set to Team ");
				st = ftos (self.team);
				sprint (self.owner, BOT_FIGHTING, st);
				sprint (self.owner, BOT_FIGHTING, "\n");
				self.owner.undercover_team = self.team;
				stuffcmd (self.owner, "color ");
				tc = (TeamFortress_TeamGetColor (self.team) - TF_FLARE_OFF);
				st = ftos (tc);
				stuffcmd (self.owner, st);
				stuffcmd (self.owner, "\n");
			}
			TeamFortress_SpyCalcName (self.owner);
			if ((self.owner.StatusBarSize == TF_FLARE_LIT))
			{
				CenterPrint (self.owner, "You are now disguised.\n");
			}
			self.owner.is_undercover = TF_FLARE_OFF;
		}
	}
	self.owner.StatusRefreshTime = (time + 0.1);
	dremove (self);
};

void (float class) TeamFortress_SpyChangeSkin =
{
	local entity te;

	if (class == 8)
	{
		sprint (self, BOT_FIGHTING, "Skin reset.");
		self.undercover_skin = TF_FLARE_LIT;
		TeamFortress_SetSkin (self);
		if ((self.undercover_team == TF_FLARE_LIT))
		{
			self.items = (self.items - (self.items & IT_INVISIBILITY));
			self.is_undercover = TF_FLARE_LIT;
		}
		return;
	}
	sprint (self, BOT_FIGHTING, "Going undercover...\n");
	self.is_undercover = BOT_FIGHTING;
	te = spawn ();
	te.classname = "timer";
	te.owner = self;
	te.think = TeamFortress_SpyUndercoverThink;
	te.nextthink = (time + BOT_MOVING);
	te.skin = class;
	TeamFortress_SetSkin (self);
};

void (float teamno) TeamFortress_SpyChangeColor =
{
	local entity te;
	local string st;
	local float tc;

	if ((teamno == self.team_no))
	{
		sprint (self, BOT_FIGHTING, "Colors reset.");
		self.immune_to_check = (time + BOT_MOVING);
		self.undercover_team = TF_FLARE_LIT;
		stuffcmd (self, "color ");
		tc = (TeamFortress_TeamGetColor (self.team_no) - TF_FLARE_OFF);
		st = ftos (tc);
		stuffcmd (self, st);
		stuffcmd (self, "\n");
		if ((self.undercover_skin == TF_FLARE_LIT))
		{
			self.items = (self.items - (self.items & IT_INVISIBILITY));
			self.is_undercover = TF_FLARE_LIT;
		}
		return;
	}
	sprint (self, BOT_FIGHTING, "Going undercover...\n");
	self.is_undercover = BOT_FIGHTING;
	te = spawn ();
	te.classname = "timer";
	te.owner = self;
	te.think = TeamFortress_SpyUndercoverThink;
	te.nextthink = (time + BOT_MOVING);
	te.team = teamno;
};

void () GasGrenadeTouch =
{
	sound (self, TF_FLARE_OFF, "weapons/bounce.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if ((self.velocity == '0 0 0'))
	{
		self.avelocity = '0 0 0';
	}
};

void () GasGrenadeExplode =
{
	local vector tmpv;
	local entity te;
	local float pos;

	pos = pointcontents (self.origin);
	if ((pos == CONTENT_EMPTY))
	{
		te = spawn ();
		te.think = GasGrenadeMakeGas;
		te.nextthink = (time + 0.1);
		te.heat = TF_FLARE_LIT;
		te.origin = self.origin;
		te.owner = self.owner;
		te.team_no = self.owner.team_no;
		te.weapon = TF_FLARE_LIT;
	}
	else
	{
		pos = TF_FLARE_LIT;
		while ((pos < BOT_AI_SCOUT))
		{
			newmis = spawn ();
			setmodel (newmis, "progs/s_bubble.spr");
			setorigin (newmis, self.origin);
			newmis.movetype = BOT_DEFEND;
			newmis.solid = TF_FLARE_LIT;
			newmis.velocity = '0 0 15';
			newmis.velocity_z = (BOT_AI_SCOUT + (random () * 20));
			newmis.nextthink = (time + 0.5);
			newmis.think = bubble_bob;
			newmis.classname = "bubble";
			newmis.frame = TF_FLARE_LIT;
			newmis.cnt = TF_FLARE_LIT;
			setsize (newmis, '-8 -8 -8', '8 8 8');
			pos = (pos + TF_FLARE_OFF);
		}
	}
	dremove (self);
};

void () GasGrenadeMakeGas =
{
	local entity te;
	local entity timer;

	self.nextthink = (time + 0.75);
	te = findradius (self.origin, BOT_IMPULSE);
	while ((te != world))
	{
		if (((te.classname == "player") && (te.deadflag == TF_FLARE_LIT)))
		{
			deathmsg = 24;
			TF_T_Damage (te, world, self.owner, BOT_AI_SCOUT, TF_FLARE_OFF, TF_FLARE_LIT);
			if ((te.tfstate & 16384))
			{
				timer = find (world, classname, "timer");
				while ((((timer.owner != te) || (timer.think != HallucinationTimer)) && (timer != world)))
				{
					timer = find (timer, classname, "timer");
				}
				if ((timer != world))
				{
					timer.health = (timer.health + 25);
					if ((timer.health < 100))
					{
						timer.health = 100;
					}
					timer.nextthink = (time + 0.5);
				}
			}
			else
			{
				sprint (te, BOT_FIGHTING, "Far out man!\n");
				te.tfstate = (te.tfstate | 16384);
				timer = spawn ();
				timer.nextthink = (time + 0.5);
				timer.think = HallucinationTimer;
				timer.classname = "timer";
				timer.owner = te;
				timer.health = 100;
				timer.team_no = self.team_no;
			}
		}
		te = te.chain;
	}
	self.heat = (self.heat + TF_FLARE_OFF);
	if ((self.heat == TF_FLARE_OFF))
	{
		WriteByte (BOT_MOVING, 23);
		WriteByte (BOT_MOVING, BOT_MOVING);
		WriteCoord (BOT_MOVING, self.origin_x);
		WriteCoord (BOT_MOVING, self.origin_y);
		WriteCoord (BOT_MOVING, self.origin_z);
		multicast (self.origin, BOT_FIGHTING);
		return;
	}
	if ((self.heat <= 20))
	{
		self.weapon = (self.weapon + TF_FLARE_OFF);
		if ((self.weapon == TF_FLARE_OFF))
		{
			WriteByte (BOT_MOVING, 23);
			WriteByte (BOT_MOVING, BOT_AI_SCOUT);
			WriteCoord (BOT_MOVING, self.origin_x);
			WriteCoord (BOT_MOVING, self.origin_y);
			WriteCoord (BOT_MOVING, (self.origin_z - 24));
			multicast (self.origin, BOT_FIGHTING);
		}
		else
		{
			if ((self.weapon == BOT_FIGHTING))
			{
				self.weapon = TF_FLARE_LIT;
			}
		}
		return;
	}
	dremove (self);
};

void () HallucinationTimer =
{
	local entity te;
	local float tmpx;
	local float tmpy;
	local float halltype;

	self.health = (self.health - 2.5);
	if ((self.owner.playerclass == BOT_AI_GRAPPLE))
	{
		self.health = (self.health - 2.5);
	}
	if ((self.health <= TF_FLARE_LIT))
	{
		self.owner.tfstate = (self.owner.tfstate - (self.owner.tfstate & 16384));
	}
	if (!(self.owner.tfstate & 16384))
	{
		sprint (self.owner, BOT_FIGHTING, "You feel a little better now.\n");
		dremove (self);
		return;
	}
	self.nextthink = (time + 0.5);
	if ((random () < 0.5))
	{
		KickPlayer (-10, self.owner);
	}
	tmpx = ((random () * 800) - 400);
	tmpy = ((random () * 800) - 400);
	halltype = random ();
	msg_entity = self.owner;
	if ((halltype < 0.4))
	{
		WriteByte (TF_FLARE_OFF, 23);
		if ((halltype < 0.5))
		{
			WriteByte (TF_FLARE_OFF, BOT_AI_FOLLOW);
		}
		else
		{
			if ((halltype < 0.55))
			{
				WriteByte (TF_FLARE_OFF, BOT_MOVING);
			}
			else
			{
				WriteByte (TF_FLARE_OFF, BOT_AI_SCOUT);
			}
		}
		WriteCoord (TF_FLARE_OFF, (msg_entity.origin_x + tmpx));
		WriteCoord (TF_FLARE_OFF, (msg_entity.origin_y + tmpy));
		WriteCoord (TF_FLARE_OFF, msg_entity.origin_z);
	}
	else
	{
		if ((halltype < 0.7))
		{
			WriteByte (TF_FLARE_OFF, 23);
			WriteByte (TF_FLARE_OFF, 11);
			WriteCoord (TF_FLARE_OFF, (msg_entity.origin_x + tmpx));
			WriteCoord (TF_FLARE_OFF, (msg_entity.origin_y + tmpy));
			WriteCoord (TF_FLARE_OFF, msg_entity.origin_z);
		}
		else
		{
			te = spawn ();
			te.origin_x = (msg_entity.origin_x + tmpx);
			te.origin_y = (msg_entity.origin_y + tmpy);
			te.origin_z = msg_entity.origin_z;
			WriteByte (TF_FLARE_OFF, 23);
			WriteByte (TF_FLARE_OFF, BOT_AI_FLEE);
			WriteEntity (TF_FLARE_OFF, te);
			WriteCoord (TF_FLARE_OFF, te.origin_x);
			WriteCoord (TF_FLARE_OFF, te.origin_y);
			WriteCoord (TF_FLARE_OFF, te.origin_z);
			tmpx = ((random () * 800) - 400);
			tmpy = ((random () * 800) - 400);
			WriteCoord (TF_FLARE_OFF, (msg_entity.origin_x + tmpx));
			WriteCoord (TF_FLARE_OFF, (msg_entity.origin_y + tmpy));
			WriteCoord (TF_FLARE_OFF, msg_entity.origin_z);
			dremove (te);
		}
	}
};

void () W_FireTranq =
{
	self.ammo_shells = (self.ammo_shells - TF_FLARE_OFF);
	self.currentammo = (self.ammo_shells - TF_FLARE_OFF);
	KickPlayer (-2, self);
	newmis = spawn ();
	newmis.owner = self;
	newmis.movetype = BOT_AI_FLAGRUN;
	newmis.solid = BOT_FIGHTING;
	makevectors (self.v_angle);
	newmis.velocity = v_forward;
	newmis.velocity = (newmis.velocity * 1500);
	newmis.angles = vectoangles (newmis.velocity);
	newmis.touch = T_TranqDartTouch;
	newmis.think = SUB_Remove;
	newmis.nextthink = (time + BOT_AI_FLEE);
	setmodel (newmis, "progs/spike.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, ((self.origin + (v_forward * BOT_DEFEND)) + '0 0 16'));
};

void () T_TranqDartTouch =
{
	local entity timer;

	if ((other.solid == TF_FLARE_OFF))
	{
		return;
	}
	if ((pointcontents (self.origin) == -6))
	{
		dremove (self);
		return;
	}
	if (other.takedamage)
	{
		spawn_touchblood (BOT_AI_FLAGRUN);
		deathmsg = 25;
		TF_T_Damage (other, self, self.owner, 20, BOT_FIGHTING, BOT_FIGHTING);
		if (((other.classname == "player") && !((other.team_no == self.owner.team_no) && (teamplay & (BOT_FIGHTING | BOT_MOVING)))))
		{
			if ((other.tfstate & 32768))
			{
				timer = find (world, classname, "timer");
				while ((((timer.owner != other) || (timer.think != TranquiliserTimer)) && (timer != world)))
				{
					timer = find (timer, classname, "timer");
				}
				if ((timer != world))
				{
					timer.nextthink = (time + 15);
				}
			}
			else
			{
				sprint (other, BOT_FIGHTING, "You feel tired...\n");
				other.tfstate = (other.tfstate | 32768);
				timer = spawn ();
				timer.nextthink = (time + 15);
				timer.think = TranquiliserTimer;
				timer.classname = "timer";
				timer.owner = other;
				timer.team_no = self.owner.team_no;
				TeamFortress_SetSpeed (other);
			}
		}
	}
	else
	{
		WriteByte (BOT_MOVING, 23);
		if ((self.classname == "wizspike"))
		{
			WriteByte (BOT_MOVING, BOT_AI_BLAST);
		}
		else
		{
			if ((self.classname == "knightspike"))
			{
				WriteByte (BOT_MOVING, BOT_DEFEND);
			}
			else
			{
				WriteByte (BOT_MOVING, TF_FLARE_LIT);
			}
		}
		WriteCoord (BOT_MOVING, self.origin_x);
		WriteCoord (BOT_MOVING, self.origin_y);
		WriteCoord (BOT_MOVING, self.origin_z);
		multicast (self.origin, BOT_FIGHTING);
	}
	dremove (self);
};

void () TranquiliserTimer =
{
	self.owner.tfstate = (self.owner.tfstate - (self.owner.tfstate & 32768));
	TeamFortress_SetSpeed (self.owner);
	sprint (self.owner, BOT_FIGHTING, "You feel more alert now\n");
	dremove (self);
};

void (entity spy) Spy_RemoveDisguise =
{
	local string st;
	local float tc;
	local float reset;

	if ((invis_only != TF_FLARE_OFF))
	{
		if ((spy.playerclass == BOT_DEFEND))
		{
			if ((spy.undercover_skin != TF_FLARE_LIT))
			{
				spy.items = (spy.items - (spy.items & IT_INVISIBILITY));
				spy.immune_to_check = (time + BOT_MOVING);
				spy.undercover_skin = TF_FLARE_LIT;
				spy.skin = TF_FLARE_LIT;
				TeamFortress_SetSkin (spy);
			}
			if ((spy.undercover_team != TF_FLARE_LIT))
			{
				spy.items = (spy.items - (spy.items & IT_INVISIBILITY));
				spy.immune_to_check = (time + BOT_MOVING);
				spy.undercover_team = TF_FLARE_LIT;
				stuffcmd (spy, "color ");
				tc = (TeamFortress_TeamGetColor (spy.team_no) - TF_FLARE_OFF);
				st = ftos (tc);
				stuffcmd (spy, st);
				stuffcmd (spy, "\n");
			}
			spy.is_undercover = TF_FLARE_LIT;
			self.StatusRefreshTime = (time + 0.1);
			TeamFortress_SpyCalcName (spy);
		}
	}
	else
	{
		if (spy.is_undercover)
		{
			spy.is_undercover = TF_FLARE_LIT;
			spy.modelindex = modelindex_player;
			if ((spy.items & IT_INVISIBILITY))
			{
				spy.items = (spy.items - IT_INVISIBILITY);
			}
			self.StatusRefreshTime = (time + 0.1);
		}
	}
};
