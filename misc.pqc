
void () info_null =
{
	dremove (self);
};

void () info_notnull =
{
};

void () light_use =
{
	if ((self.spawnflags & TF_FLARE_OFF))
	{
		lightstyle (self.style, "m");
		self.spawnflags = (self.spawnflags - TF_FLARE_OFF);
	}
	else
	{
		lightstyle (self.style, "a");
		self.spawnflags = (self.spawnflags + TF_FLARE_OFF);
	}
};

void () light =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	if (!self.targetname)
	{
		dremove (self);
		return;
	}
	if ((self.style >= BOT_AVOIDING_HAZARD))
	{
		self.use = light_use;
		if ((self.spawnflags & TF_FLARE_OFF))
		{
			lightstyle (self.style, "a");
		}
		else
		{
			lightstyle (self.style, "m");
		}
	}
};

void () light_fluoro =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	if ((self.style >= BOT_AVOIDING_HAZARD))
	{
		self.use = light_use;
		if ((self.spawnflags & TF_FLARE_OFF))
		{
			lightstyle (self.style, "a");
		}
		else
		{
			lightstyle (self.style, "m");
		}
	}
	precache_sound ("ambience/fl_hum1.wav");
	ambientsound (self.origin, "ambience/fl_hum1.wav", 0.5, BOT_AI_FOLLOW);
};

void () light_fluorospark =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	if (!self.style)
	{
		self.style = BOT_AI_SCOUT;
	}
	precache_sound ("ambience/buzz1.wav");
	ambientsound (self.origin, "ambience/buzz1.wav", 0.5, BOT_AI_FOLLOW);
};

void () light_globe =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/s_light.spr");
	setmodel (self, "progs/s_light.spr");
	makestatic (self);
};

void () FireAmbient =
{
	precache_sound ("ambience/fire1.wav");
	ambientsound (self.origin, "ambience/fire1.wav", 0.5, BOT_AI_FOLLOW);
};

void () light_torch_small_walltorch =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/flame.mdl");
	setmodel (self, "progs/flame.mdl");
	FireAmbient ();
	makestatic (self);
};

void () light_flame_large_yellow =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/flame2.mdl");
	setmodel (self, "progs/flame2.mdl");
	self.frame = TF_FLARE_OFF;
	FireAmbient ();
	makestatic (self);
};

void () light_flame_small_yellow =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/flame2.mdl");
	setmodel (self, "progs/flame2.mdl");
	FireAmbient ();
	makestatic (self);
};

void () light_flame_small_white =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/flame2.mdl");
	setmodel (self, "progs/flame2.mdl");
	FireAmbient ();
	makestatic (self);
};
void () fire_fly;
void () fire_touch;

void () misc_fireball =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_model ("progs/lavaball.mdl");
	self.classname = "fireball";
	self.nextthink = (time + (random () * BOT_AI_GRAPPLE));
	self.think = fire_fly;
	if (!self.speed)
	{
	}
};

void () fire_fly =
{
	newmis = spawn ();
	newmis.solid = TF_FLARE_OFF;
	newmis.movetype = BOT_AI_FLEE;
	newmis.velocity = '0 0 1000';
	newmis.velocity_x = ((random () * 100) - 50);
	newmis.velocity_y = ((random () * 100) - 50);
	newmis.velocity_z = (self.speed + (random () * BOT_IMPULSE));
	newmis.classname = "fireball";
	setmodel (newmis, "progs/lavaball.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, self.origin);
	newmis.nextthink = (time + BOT_AI_GRAPPLE);
	newmis.think = SUB_Remove;
	newmis.touch = fire_touch;
	self.nextthink = ((time + (random () * BOT_AI_GRAPPLE)) + BOT_AI_FOLLOW);
	self.think = fire_fly;
};

void () fire_touch =
{
	if (other.takedamage)
	{
		TF_T_Damage (other, self, self, 20, TF_FLARE_LIT, BOT_RESUPPLYING);
	}
	dremove (self);
};

void () barrel_explode =
{
	self.takedamage = TF_FLARE_LIT;
	self.classname = "explo_box";
	T_RadiusDamage (self, self, 160, world);
	WriteByte (BOT_MOVING, 23);
	WriteByte (BOT_MOVING, BOT_AI_FOLLOW);
	WriteCoord (BOT_MOVING, self.origin_x);
	WriteCoord (BOT_MOVING, self.origin_y);
	WriteCoord (BOT_MOVING, (self.origin_z + BOT_AVOIDING_HAZARD));
	multicast (self.origin, TF_FLARE_OFF);
	remove (self);
};

void () misc_explobox =
{
	local float oldz;

	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	self.solid = BOT_FIGHTING;
	self.movetype = TF_FLARE_LIT;
	precache_model ("maps/b_explob.bsp");
	setmodel (self, "maps/b_explob.bsp");
	setsize (self, '0 0 0', '32 32 64');
	precache_sound ("weapons/r_exp3.wav");
	self.health = 20;
	self.th_die = barrel_explode;
	self.takedamage = BOT_FIGHTING;
	self.origin_z = (self.origin_z + BOT_FIGHTING);
	oldz = self.origin_z;
	droptofloor ();
	if (((oldz - self.origin_z) > 250))
	{
		dprint ("item fell out of level at ");
		dprint (vtos (self.origin));
		dprint ("\n");
		dremove (self);
	}
};

void () misc_explobox2 =
{
	local float oldz;

	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	self.solid = BOT_FIGHTING;
	self.movetype = TF_FLARE_LIT;
	precache_model2 ("maps/b_exbox2.bsp");
	setmodel (self, "maps/b_exbox2.bsp");
	setsize (self, '0 0 0', '32 32 32');
	precache_sound ("weapons/r_exp3.wav");
	self.health = 20;
	self.th_die = barrel_explode;
	self.takedamage = BOT_FIGHTING;
	self.origin_z = (self.origin_z + BOT_FIGHTING);
	oldz = self.origin_z;
	droptofloor ();
	if (((oldz - self.origin_z) > 250))
	{
		dprint ("item fell out of level at ");
		dprint (vtos (self.origin));
		dprint ("\n");
		dremove (self);
	}
};
void (vector org, vector vec) LaunchLaser;

void () Laser_Touch =
{
	local vector org;

	if ((other == self.owner))
	{
		return;
	}
	if ((pointcontents (self.origin) == -6))
	{
		dremove (self);
		return;
	}
	sound (self, TF_FLARE_OFF, "enforcer/enfstop.wav", TF_FLARE_OFF, BOT_AI_FOLLOW);
	org = (self.origin - (BOT_DEFEND * normalize (self.velocity)));
	if (other.health)
	{
		SpawnBlood (org, 15);
		TF_T_Damage (other, self, self.owner, 15, TF_FLARE_LIT, BOT_DEFEND);
	}
	else
	{
		WriteByte (BOT_MOVING, 23);
		WriteByte (BOT_MOVING, BOT_FIGHTING);
		WriteByte (BOT_MOVING, BOT_AI_GRAPPLE);
		WriteCoord (BOT_MOVING, org_x);
		WriteCoord (BOT_MOVING, org_y);
		WriteCoord (BOT_MOVING, org_z);
		multicast (org, BOT_FIGHTING);
	}
	dremove (self);
};

void (vector org, vector vec) LaunchLaser =
{
	if ((self.classname == "monster_enforcer"))
	{
		sound (self, TF_FLARE_OFF, "enforcer/enfire.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	}
	vec = normalize (vec);
	newmis = spawn ();
	newmis.owner = self;
	newmis.movetype = BOT_AI_GRAPPLE;
	newmis.solid = BOT_FIGHTING;
	newmis.effects = BOT_DEFEND;
	setmodel (newmis, "progs/laser.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, org);
	newmis.velocity = (vec * 600);
	newmis.angles = vectoangles (newmis.velocity);
	newmis.nextthink = (time + BOT_AI_GRAPPLE);
	newmis.think = SUB_Remove;
	newmis.touch = Laser_Touch;
};

void () spikeshooter_use =
{
	if ((self.spawnflags & BOT_FIGHTING))
	{
		sound (self, BOT_FIGHTING, "enforcer/enfire.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		LaunchLaser (self.origin, self.movedir);
	}
	else
	{
		sound (self, BOT_FIGHTING, "weapons/spike2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		launch_spike (self.origin, self.movedir);
		newmis.velocity = (self.movedir * 500);
		if ((self.spawnflags & TF_FLARE_OFF))
		{
			newmis.touch = superspike_touch;
		}
	}
};

void () shooter_think =
{
	spikeshooter_use ();
	self.nextthink = (time + self.wait);
	newmis.velocity = (self.movedir * 500);
};

void () trap_spikeshooter =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	SetMovedir ();
	self.use = spikeshooter_use;
	if ((self.spawnflags & BOT_FIGHTING))
	{
		precache_model2 ("progs/laser.mdl");
		precache_sound2 ("enforcer/enfire.wav");
		precache_sound2 ("enforcer/enfstop.wav");
	}
	else
	{
		precache_sound ("weapons/spike2.wav");
	}
};

void () trap_shooter =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	trap_spikeshooter ();
	if ((self.wait == TF_FLARE_LIT))
	{
		self.wait = TF_FLARE_OFF;
	}
	self.nextthink = ((self.nextthink + self.wait) + self.ltime);
	self.think = shooter_think;
};
void () make_bubbles;
void () bubble_remove;

void () air_bubbles =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	dremove (self);
};

void () make_bubbles =
{
	newmis = spawn ();
	setmodel (newmis, "progs/s_bubble.spr");
	setorigin (newmis, self.origin);
	newmis.movetype = BOT_DEFEND;
	newmis.solid = TF_FLARE_LIT;
	newmis.velocity = '0 0 15';
	newmis.nextthink = (time + 0.5);
	newmis.think = bubble_bob;
	newmis.touch = bubble_remove;
	newmis.classname = "bubble";
	newmis.frame = TF_FLARE_LIT;
	newmis.cnt = TF_FLARE_LIT;
	setsize (newmis, '-8 -8 -8', '8 8 8');
	self.nextthink = ((time + random ()) + 0.5);
	self.think = make_bubbles;
};

void () bubble_split =
{
	newmis = spawn ();
	setmodel (newmis, "progs/s_bubble.spr");
	setorigin (newmis, self.origin);
	newmis.movetype = BOT_DEFEND;
	newmis.solid = TF_FLARE_LIT;
	newmis.velocity = self.velocity;
	newmis.nextthink = (time + 0.5);
	newmis.think = bubble_bob;
	newmis.touch = bubble_remove;
	newmis.classname = "bubble";
	newmis.frame = TF_FLARE_OFF;
	newmis.cnt = BOT_AI_SCOUT;
	setsize (newmis, '-8 -8 -8', '8 8 8');
	self.frame = TF_FLARE_OFF;
	self.cnt = BOT_AI_SCOUT;
	if ((self.waterlevel != BOT_AI_FOLLOW))
	{
		remove (self);
	}
};

void () bubble_remove =
{
	if ((other.classname == self.classname))
	{
		return;
	}
	dremove (self);
};

void () bubble_bob =
{
	local float rnd1;
	local float rnd2;
	local float rnd3;
	local vector vtmp1;
	local vector modi;

	self.cnt = (self.cnt + TF_FLARE_OFF);
	if ((self.cnt == BOT_MOVING))
	{
		bubble_split ();
	}
	if ((self.cnt == 20))
	{
		dremove (self);
	}
	rnd1 = (self.velocity_x + (-10 + (random () * 20)));
	rnd2 = (self.velocity_y + (-10 + (random () * 20)));
	rnd3 = ((self.velocity_z + BOT_AI_SCOUT) + (random () * BOT_AI_SCOUT));
	if ((rnd1 > BOT_AI_SCOUT))
	{
		rnd1 = BOT_AI_GRAPPLE;
	}
	if ((rnd1 < -10))
	{
		rnd1 = CONTENT_LAVA;
	}
	if ((rnd2 > BOT_AI_SCOUT))
	{
		rnd2 = BOT_AI_GRAPPLE;
	}
	if ((rnd2 < -10))
	{
		rnd2 = CONTENT_LAVA;
	}
	if ((rnd3 < BOT_AI_SCOUT))
	{
		rnd3 = 15;
	}
	if ((rnd3 > 30))
	{
		rnd3 = 25;
	}
	self.velocity_x = rnd1;
	self.velocity_y = rnd2;
	self.velocity_z = rnd3;
	self.nextthink = (time + 0.5);
	self.think = bubble_bob;
};

void () viewthing =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	self.movetype = TF_FLARE_LIT;
	self.solid = TF_FLARE_LIT;
	precache_model ("progs/player.mdl");
	setmodel (self, "progs/player.mdl");
};

void () func_wall_use =
{
	self.frame = (TF_FLARE_OFF - self.frame);
};

void () func_wall =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	self.angles = '0 0 0';
	self.movetype = BOT_AI_BLAST;
	self.solid = BOT_MOVING;
	self.use = func_wall_use;
	setmodel (self, self.model);
};

void () func_illusionary =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	self.angles = '0 0 0';
	self.movetype = TF_FLARE_LIT;
	self.solid = TF_FLARE_LIT;
	setmodel (self, self.model);
	makestatic ();
};

void () func_episodegate =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	if (!(serverflags & self.spawnflags))
	{
		return;
	}
	self.angles = '0 0 0';
	self.movetype = BOT_AI_BLAST;
	self.solid = BOT_MOVING;
	self.use = func_wall_use;
	setmodel (self, self.model);
};

void () func_bossgate =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	if (((serverflags & 15) == 15))
	{
		return;
	}
	self.angles = '0 0 0';
	self.movetype = BOT_AI_BLAST;
	self.solid = BOT_MOVING;
	self.use = func_wall_use;
	setmodel (self, self.model);
};

void () ambient_suck_wind =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/suck1.wav");
	ambientsound (self.origin, "ambience/suck1.wav", TF_FLARE_OFF, BOT_AI_FOLLOW);
};

void () ambient_drone =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/drone6.wav");
	ambientsound (self.origin, "ambience/drone6.wav", 0.5, BOT_AI_FOLLOW);
};

void () ambient_flouro_buzz =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/buzz1.wav");
	ambientsound (self.origin, "ambience/buzz1.wav", TF_FLARE_OFF, BOT_AI_FOLLOW);
};

void () ambient_drip =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/drip1.wav");
	ambientsound (self.origin, "ambience/drip1.wav", 0.5, BOT_AI_FOLLOW);
};

void () ambient_comp_hum =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/comp1.wav");
	ambientsound (self.origin, "ambience/comp1.wav", TF_FLARE_OFF, BOT_AI_FOLLOW);
};

void () ambient_thunder =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/thunder1.wav");
	ambientsound (self.origin, "ambience/thunder1.wav", 0.5, BOT_AI_FOLLOW);
};

void () ambient_light_buzz =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/fl_hum1.wav");
	ambientsound (self.origin, "ambience/fl_hum1.wav", 0.5, BOT_AI_FOLLOW);
};

void () ambient_swamp1 =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/swamp1.wav");
	ambientsound (self.origin, "ambience/swamp1.wav", 0.5, BOT_AI_FOLLOW);
};

void () ambient_swamp2 =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound ("ambience/swamp2.wav");
	ambientsound (self.origin, "ambience/swamp2.wav", 0.5, BOT_AI_FOLLOW);
};

void () noise_think =
{
	self.nextthink = (time + 0.5);
	sound (self, TF_FLARE_OFF, "enforcer/enfire.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_FIGHTING, "enforcer/enfstop.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_AI_FOLLOW, "enforcer/sight1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_MOVING, "enforcer/sight2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_AI_GRAPPLE, "enforcer/sight3.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_AI_FLEE, "enforcer/sight4.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	sound (self, BOT_AI_BLAST, "enforcer/pain1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
};

void () misc_noisemaker =
{
	if ((CheckExistence () == TF_FLARE_LIT))
	{
		dremove (self);
		return;
	}
	precache_sound2 ("enforcer/enfire.wav");
	precache_sound2 ("enforcer/enfstop.wav");
	precache_sound2 ("enforcer/sight1.wav");
	precache_sound2 ("enforcer/sight2.wav");
	precache_sound2 ("enforcer/sight3.wav");
	precache_sound2 ("enforcer/sight4.wav");
	precache_sound2 ("enforcer/pain1.wav");
	precache_sound2 ("enforcer/pain2.wav");
	precache_sound2 ("enforcer/death1.wav");
	precache_sound2 ("enforcer/idle1.wav");
	self.nextthink = ((time + 0.1) + random ());
	self.think = noise_think;
};
