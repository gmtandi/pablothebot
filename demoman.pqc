void () NormalGrenadeTouch;
void () NormalGrenadeExplode;
void () MirvGrenadeTouch;
void () MirvGrenadeExplode;
void (vector org, entity shooter) MirvGrenadeLaunch;
void () TeamFortress_DetpackSet;
void () TeamFortress_DetpackExplode;
void () TeamFortress_DetpackTouch;
void () TeamFortress_DetpackDisarm;
void () TeamFortress_DetpackCountDown;

void () TeamFortress_DetonatePipebombs =
{
	local entity e;

	e = find (world, classname, "pipebomb");
	while ((e != world))
	{
		if ((e.owner == self))
		{
			e.nextthink = time;
		}
		e = find (e, classname, "pipebomb");
	}
};

void () PipebombTouch =
{
	sound (self, TF_FLARE_OFF, "weapons/bounce.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if ((self.velocity == '0 0 0'))
	{
		self.avelocity = '0 0 0';
	}
};

void () MirvGrenadeTouch =
{
	sound (self, TF_FLARE_OFF, "weapons/bounce.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if ((self.velocity == '0 0 0'))
	{
		self.avelocity = '0 0 0';
	}
};

void () MirvGrenadeExplode =
{
	local float i;

	deathmsg = BOT_AI_SCOUT;
	T_RadiusDamage (self, self.owner, 100, world);
	WriteByte (BOT_MOVING, 23);
	WriteByte (BOT_MOVING, BOT_AI_FOLLOW);
	WriteCoord (BOT_MOVING, self.origin_x);
	WriteCoord (BOT_MOVING, self.origin_y);
	WriteCoord (BOT_MOVING, self.origin_z);
	multicast (self.origin, TF_FLARE_OFF);
	self.solid = TF_FLARE_LIT;
	i = TF_FLARE_LIT;
	while ((i < 12))
	{
		MirvGrenadeLaunch ((self.origin + '0 0 -1'), self.owner);
		i = (i + TF_FLARE_OFF);
	}
	BecomeExplosion ();
};

void (vector org, entity shooter) MirvGrenadeLaunch =
{
	local float xdir;
	local float ydir;
	local float zdir;

	xdir = ((150 * random ()) - 75);
	ydir = ((150 * random ()) - 75);
	zdir = (40 * random ());
	newmis = spawn ();
	newmis.owner = shooter;
	newmis.movetype = BOT_AI_SCOUT;
	newmis.solid = BOT_FIGHTING;
	newmis.classname = "grenade";
	newmis.weapon = BOT_AI_SCOUT;
	newmis.touch = GrenadeTouch;
	newmis.think = GrenadeExplode;
	newmis.nextthink = ((time + BOT_FIGHTING) + random ());
	newmis.velocity_x = (xdir * BOT_FIGHTING);
	newmis.velocity_y = (ydir * BOT_FIGHTING);
	newmis.velocity_z = (zdir * 15);
	newmis.avelocity = '250 300 400';
	setmodel (newmis, "progs/grenade2.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, org);
};

void (float timer) TeamFortress_SetDetpack =
{
	local string stimer;

	self.impulse = TF_FLARE_LIT;
	self.last_impulse = TF_FLARE_LIT;
	if (!(self.weapons_carried & 131072))
	{
		return;
	}
	if ((self.ammo_detpack <= TF_FLARE_LIT))
	{
		return;
	}
	if (!(self.flags & FL_ONGROUND))
	{
		sprint (self, BOT_FIGHTING, "You can't set detpacks in the air!\n");
		return;
	}
	if ((timer < BOT_AI_GRAPPLE))
	{
		sprint (self, BOT_FIGHTING, "You can't set detpacks for less that 5 seconds.\n");
		return;
	}
	self.is_detpacking = TF_FLARE_OFF;
	self.ammo_detpack = (self.ammo_detpack - TF_FLARE_OFF);
	self.immune_to_check = (time + BOT_FIGHTING);
	self.tfstate = (self.tfstate | 65536);
	self.weapon = self.current_weapon;
	self.current_weapon = TF_FLARE_LIT;
	self.weaponmodel = "";
	self.weaponframe = TF_FLARE_LIT;
	TeamFortress_SetSpeed (self);
	self.pausetime = (time + BOT_MOVING);
	stimer = ftos (timer);
	sprint (self, BOT_FIGHTING, "Setting detpack for ");
	sprint (self, BOT_FIGHTING, stimer);
	sprint (self, BOT_FIGHTING, " seconds...\n");
	newmis = spawn ();
	newmis.owner = self;
	newmis.classname = "timer";
	newmis.netname = "detpack_timer";
	newmis.nextthink = (time + BOT_MOVING);
	newmis.think = TeamFortress_DetpackSet;
	newmis.health = timer;
};

void () TeamFortress_DetpackStop =
{
	local entity detpack_timer;

	detpack_timer = find (world, netname, "detpack_timer");
	while (((detpack_timer.owner != self) && (detpack_timer != world)))
	{
		detpack_timer = find (detpack_timer, netname, "detpack_timer");
	}
	if ((detpack_timer == world))
	{
		return;
	}
	sprint (self, BOT_FIGHTING, "Detpack retrieved.\n");
	self.ammo_detpack = (self.ammo_detpack + TF_FLARE_OFF);
	dremove (detpack_timer);
	self.tfstate = (self.tfstate - (self.tfstate & 65536));
	self.is_detpacking = TF_FLARE_LIT;
	self.current_weapon = self.weapon;
	W_SetCurrentAmmo ();
	TeamFortress_SetSpeed (self);
	self.pausetime = time;
};

void () TeamFortress_DetpackSet =
{
	local entity countd;
	local entity oldself;

	self.is_detpacking = TF_FLARE_LIT;
	self.owner.tfstate = (self.owner.tfstate - (self.owner.tfstate & 65536));
	TeamFortress_SetSpeed (self.owner);
	oldself = self;
	self = self.owner;
	self.is_detpacking = TF_FLARE_LIT;
	self.current_weapon = self.weapon;
	W_SetCurrentAmmo ();
	self = oldself;
	newmis = spawn ();
	newmis.owner = self.owner;
	newmis.origin = (self.owner.origin - '0 0 23');
	newmis.movetype = BOT_AI_SCOUT;
	newmis.solid = BOT_FIGHTING;
	newmis.classname = "detpack";
	newmis.flags = FL_ITEM;
	newmis.angles = '90 0 0';
	newmis.angles_y = self.owner.angles_y;
	newmis.velocity = '0 0 0';
	newmis.avelocity = '0 0 0';
	newmis.weaponmode = TF_FLARE_LIT;
	newmis.touch = TeamFortress_DetpackTouch;
	setmodel (newmis, "progs/detpack.mdl");
	setsize (newmis, '-16 -16 0', '16 16 8');
	setorigin (newmis, self.owner.origin);
	countd = spawn ();
	newmis.linked_list = countd;
	countd.think = TeamFortress_DetpackCountDown;
	countd.health = (self.health - TF_FLARE_OFF);
	countd.owner = self.owner;
	countd.classname = "countdown_timer";
	countd.enemy = newmis;
	newmis.oldenemy = countd;
	if ((self.health <= BOT_AI_SCOUT))
	{
		countd.nextthink = (time + TF_FLARE_OFF);
	}
	else
	{
		countd.nextthink = ((time + self.health) - BOT_AI_SCOUT);
		countd.health = BOT_AI_FLAGRUN;
	}
	newmis.nextthink = (time + self.health);
	newmis.think = TeamFortress_DetpackExplode;
	sprint (self.owner, BOT_FIGHTING, "Detpack set!\n");
	dremove (self);
};

void () TeamFortress_DetpackExplode =
{
	local float pos;

	bprint (TF_FLARE_OFF, "FIRE IN THE HOLE!\n");
	pos = pointcontents (self.origin);
	if (((pos != -2) && (pos != -6)))
	{
		deathmsg = 12;
		T_RadiusDamage (self, self.owner, 1500, world);
		WriteByte (BOT_MOVING, 23);
		WriteByte (BOT_MOVING, BOT_AI_FOLLOW);
		WriteCoord (BOT_MOVING, self.origin_x);
		WriteCoord (BOT_MOVING, self.origin_y);
		WriteCoord (BOT_MOVING, self.origin_z);
		multicast (self.origin, TF_FLARE_OFF);
	}
	else
	{
		bprint (BOT_FIGHTING, "Your detpack fizzled out.\n");
	}
	if ((self.weaponmode == TF_FLARE_OFF))
	{
		TeamFortress_SetSpeed (self.enemy);
		dremove (self.oldenemy);
		dremove (self.observer_list);
	}
	BecomeExplosion ();
};

void () TeamFortress_DetpackTouch =
{
	local entity disarm;

	if ((other.classname != "player"))
	{
		return;
	}
	if ((other.playerclass != TF_FLARE_OFF))
	{
		return;
	}
	if ((self.weaponmode == TF_FLARE_OFF))
	{
		return;
	}
	if (((other.team_no == self.owner.team_no) && (self.owner.team_no != TF_FLARE_LIT)))
	{
		return;
	}
	other.immune_to_check = (time + BOT_FIGHTING);
	other.tfstate = (other.tfstate | 65536);
	sprint (other, BOT_FIGHTING, "Disarming detpack...\n");
	TeamFortress_SetSpeed (other);
	disarm = spawn ();
	disarm.owner = other;
	disarm.enemy = self;
	disarm.classname = "timer";
	disarm.nextthink = (time + BOT_AI_FOLLOW);
	disarm.think = TeamFortress_DetpackDisarm;
	self.weaponmode = TF_FLARE_OFF;
	self.enemy = other;
	self.observer_list = disarm;
};

void () TeamFortress_DetpackDisarm =
{
	bprint (TF_FLARE_OFF, self.enemy.owner.netname);
	bprint (TF_FLARE_OFF, "'s detpack was defused by ");
	bprint (TF_FLARE_OFF, self.owner.netname);
	bprint (TF_FLARE_OFF, "\n");
	self.owner.tfstate = (self.owner.tfstate - (self.owner.tfstate & 65536));
	TeamFortress_SetSpeed (self.owner);
	dremove (self.enemy.oldenemy);
	dremove (self.enemy);
	dremove (self);
};

void () TeamFortress_DetpackCountDown =
{
	local string cd;

	cd = ftos (self.health);
	sprint (self.owner, BOT_FIGHTING, cd);
	sprint (self.owner, BOT_FIGHTING, "...\n");
	self.nextthink = (time + TF_FLARE_OFF);
	self.health = (self.health - TF_FLARE_OFF);
	if ((self.health <= BOT_MOVING))
	{
		self.enemy.skin = TF_FLARE_OFF;
	}
	if ((self.health == TF_FLARE_LIT))
	{
		dremove (self);
	}
};
