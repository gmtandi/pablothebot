void () NapalmGrenadeTouch;
void (vector org, entity shooter) NapalmGrenadeLaunch;
void () Napalm_touch;
float (string id_flame) RemoveFlameFromQueue;

entity (string type, entity p_owner) FlameSpawn =
{
	num_world_flames = (num_world_flames + TF_FLARE_OFF);
	while ((num_world_flames > 60))
	{
		if (!RemoveFlameFromQueue (type))
		{
			return;
		}
	}
	newmis = spawn ();
	if ((type == "1"))
	{
		newmis.movetype = BOT_AI_FLAGRUN;
		newmis.solid = BOT_FIGHTING;
		newmis.effects = BOT_DEFEND;
		newmis.flame_id = "1";
		setmodel (newmis, "progs/flame2.mdl");
		setsize (newmis, '0 0 0', '0 0 0');
	}
	else
	{
		if ((type == "2"))
		{
			newmis.movetype = BOT_AI_SCOUT;
			newmis.solid = BOT_FIGHTING;
			newmis.flame_id = "2";
			setmodel (newmis, "progs/flame2.mdl");
			newmis.frame = TF_FLARE_OFF;
			setsize (newmis, '0 0 0', '0 0 0');
		}
		else
		{
			if ((type == "3"))
			{
				newmis.movetype = BOT_AI_FLAGRUN;
				newmis.solid = BOT_FIGHTING;
				newmis.flame_id = "3";
				setmodel (newmis, "progs/flame2.mdl");
				setsize (newmis, '0 0 0', '0 0 0');
			}
			else
			{
				if ((type == "4"))
				{
					newmis.movetype = BOT_AI_FLAGRUN;
					newmis.solid = BOT_FIGHTING;
					newmis.flame_id = "4";
					setmodel (newmis, "progs/flame2.mdl");
					newmis.frame = TF_FLARE_OFF;
					setsize (newmis, '0 0 0', '0 0 0');
				}
			}
		}
	}
	newmis.owner = p_owner;
	return (newmis);
};

void (entity this) FlameDestroy =
{
	num_world_flames = (num_world_flames - TF_FLARE_OFF);
	remove (this);
};

float (string id_flame) RemoveFlameFromQueue =
{
	local entity tmp;

	if ((num_world_flames < 60))
	{
		dprint ("ERROR in RemoveFlameFromQueue\n");
		return;
	}
	num_world_flames = (num_world_flames - TF_FLARE_OFF);
	tmp = find (world, flame_id, "4");
	if (!tmp)
	{
		if ((id_flame == "4"))
		{
			return (TF_FLARE_LIT);
		}
		tmp = find (world, flame_id, "3");
		if (!tmp)
		{
			if ((id_flame == "3"))
			{
				return (TF_FLARE_LIT);
			}
			tmp = find (world, flame_id, "2");
			if (!tmp)
			{
				if ((id_flame == "2"))
				{
					return (TF_FLARE_LIT);
				}
				tmp = find (world, flame_id, "1");
				if (!tmp)
				{
					dprint ("\n\nRemoveFlameFromQueue():BOOM!\n");
					dprint ("!! please report this bug !!\n");
					return (TF_FLARE_LIT);
				}
			}
		}
	}
	remove (tmp);
	return (TF_FLARE_OFF);
};

void () Remove =
{
	FlameDestroy (self);
};

void () NapalmGrenadeFollow =
{
	traceline (self.origin, self.origin, TF_FLARE_OFF, self);
	if ((trace_inwater == TF_FLARE_OFF))
	{
		sound (self, BOT_FIGHTING, "misc/vapeur2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		FlameDestroy (self);
	}
	if ((self.velocity == '0 0 0'))
	{
		FlameDestroy (self);
	}
	self.nextthink = (time + 0.1);
};

void () NapalmGrenadeTouch =
{
	sound (self, TF_FLARE_OFF, "weapons/bounce.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if ((self.velocity == '0 0 0'))
	{
		self.avelocity = '0 0 0';
	}
};

void () NapalmGrenadeExplode =
{
	local float i;

	sound (self, TF_FLARE_LIT, "weapons/flmgrexp.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	traceline (self.origin, self.origin, TF_FLARE_OFF, self);
	if ((trace_inwater == TF_FLARE_OFF))
	{
		dremove (self);
		return;
	}
	deathmsg = 15;
	T_RadiusDamage (self, self.owner, 20, world);
	i = TF_FLARE_LIT;
	while ((i < 15))
	{
		NapalmGrenadeLaunch ((self.origin + '0 0 5'), self.owner);
		i = (i + TF_FLARE_OFF);
	}
	self.solid = TF_FLARE_LIT;
	BecomeExplosion ();
};

void (vector org, entity shooter) NapalmGrenadeLaunch =
{
	local float xdir;
	local float ydir;
	local float zdir;
	local float spin;

	xdir = ((150 * random ()) - 75);
	ydir = ((150 * random ()) - 75);
	zdir = (40 * random ());
	newmis = FlameSpawn ("2", shooter);
	if ((newmis == world))
	{
		return;
	}
	self.touch = SUB_Null;
	newmis.classname = "fire";
	newmis.touch = Napalm_touch;
	newmis.think = NapalmGrenadeFollow;
	newmis.nextthink = (time + 0.1);
	newmis.enemy = shooter.owner;
	newmis.velocity_x = (xdir * BOT_FIGHTING);
	newmis.velocity_y = (ydir * BOT_FIGHTING);
	newmis.velocity_z = (zdir * 15);
	spin = ((random () * BOT_AI_SCOUT) / BOT_FIGHTING);
	if ((spin <= TF_FLARE_LIT))
	{
		newmis.avelocity = '250 300 400';
	}
	if ((spin == TF_FLARE_OFF))
	{
		newmis.avelocity = '400 250 300';
	}
	if ((spin == BOT_FIGHTING))
	{
		newmis.avelocity = '300 400 250';
	}
	if ((spin == BOT_AI_FOLLOW))
	{
		newmis.avelocity = '300 300 300';
	}
	if ((spin >= BOT_MOVING))
	{
		newmis.avelocity = '400 250 400';
	}
	setorigin (newmis, org);
	setsize (newmis, '0 0 0', '0 0 0');
};
void () OnPlayerFlame_touch;

void () FlameFollow =
{
	local vector dir;
	local vector vtemp;
	local vector boundsize;
	local float damage;

	vtemp = self.enemy.absmin;
	boundsize = self.enemy.size;
	self.solid = TF_FLARE_LIT;
	self.movetype = TF_FLARE_LIT;
	if ((self.enemy.numflames == TF_FLARE_LIT))
	{
		FlameDestroy (self);
		return;
	}
	if ((self.enemy.health < TF_FLARE_OFF))
	{
		deathmsg = 15;
		T_RadiusDamage (self, self, BOT_AI_SCOUT, self);
		self.enemy.numflames = TF_FLARE_LIT;
		FlameDestroy (self);
		return;
	}
	if ((self.enemy.armorclass & BOT_RESUPPLYING))
	{
		if ((self.enemy.armorvalue > TF_FLARE_LIT))
		{
			self.health = TF_FLARE_LIT;
		}
	}
	if ((self.health < TF_FLARE_OFF))
	{
		if (((self.effects != BOT_DEFEND) || (self.enemy.numflames <= TF_FLARE_OFF)))
		{
			self.enemy.numflames = (self.enemy.numflames - TF_FLARE_OFF);
			self.enemy.numflames = TF_FLARE_LIT;
			FlameDestroy (self);
			return;
		}
	}
	self.health = (self.health - TF_FLARE_OFF);
	if ((vlen (self.enemy.velocity) < 50))
	{
		dir_x = (((random () * boundsize_x) / BOT_FIGHTING) + (boundsize_x / BOT_MOVING));
		dir_y = (((random () * boundsize_y) / BOT_FIGHTING) + (boundsize_y / BOT_MOVING));
		dir_z = (((random () * boundsize_z) / BOT_AI_FOLLOW) + (boundsize_z / BOT_FIGHTING));
		vtemp = (vtemp + dir);
		setorigin (self, vtemp);
		if ((self.model != "progs/flame2.mdl"))
		{
			self.model = "progs/flame2.mdl";
			setmodel (self, self.model);
		}
	}
	else
	{
		if ((self.model == "progs/flame2.mdl"))
		{
			self.model = string_null;
			setmodel (self, self.model);
		}
	}
	traceline (self.origin, self.origin, TF_FLARE_OFF, self);
	if ((trace_inwater == TF_FLARE_OFF))
	{
		sound (self, BOT_FIGHTING, "misc/vapeur2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		self.enemy.numflames = (self.enemy.numflames - TF_FLARE_OFF);
		FlameDestroy (self);
		return;
	}
	self.nextthink = (time + 0.1);
	if (((self.effects == BOT_DEFEND) && (self.heat >= BOT_AI_FOLLOW)))
	{
		damage = ((self.enemy.numflames * 0.3) * BOT_AI_FOLLOW);
		if ((damage < TF_FLARE_OFF))
		{
			damage = TF_FLARE_OFF;
		}
		self.heat = TF_FLARE_OFF;
		deathmsg = 15;
		TF_T_Damage (self.enemy, self, self.owner, damage, BOT_FIGHTING, BOT_RESUPPLYING);
	}
	else
	{
		if ((self.effects == BOT_DEFEND))
		{
			self.heat = (self.heat + TF_FLARE_OFF);
		}
	}
};

void () OnPlayerFlame_touch =
{
	local entity flame;
	local vector vtemp;

	if ((((other != world) && (other.health > TF_FLARE_LIT)) && (other != self.enemy)))
	{
		if ((other.numflames >= BOT_MOVING))
		{
			return;
		}
		if ((other.classname == "player"))
		{
			if ((((teamplay & BOT_RESUPPLYING) && (other.team_no > TF_FLARE_LIT)) && (other.team_no == self.owner.team_no)))
			{
				return;
			}
			CenterPrint (other, "You are on fire!\n");
			stuffcmd (other, "bf\n");
		}
		if ((other.numflames < TF_FLARE_OFF))
		{
			flame = FlameSpawn ("1", other);
			sound (flame, BOT_FIGHTING, "ambience/fire1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			flame = FlameSpawn ("3", other);
			if ((flame == world))
			{
				return;
			}
		}
		flame.classname = "fire";
		flame.health = 45;
		other.numflames = (other.numflames + TF_FLARE_OFF);
		flame.velocity = other.velocity;
		flame.enemy = other;
		flame.touch = OnPlayerFlame_touch;
		flame.owner = self.owner;
		vtemp = self.origin;
		setorigin (flame, vtemp);
		flame.nextthink = (time + 0.1);
		flame.think = FlameFollow;
	}
};

void () WorldFlame_touch =
{
	local entity flame;
	local vector dir;
	local vector vtemp;

	deathmsg = 15;
	TF_T_Damage (other, self, self.enemy, BOT_FIGHTING, BOT_FIGHTING, BOT_RESUPPLYING);
	if ((((other != world) && (other.solid != TF_FLARE_OFF)) && (other.health > TF_FLARE_LIT)))
	{
		if ((other.numflames >= BOT_MOVING))
		{
			return;
		}
		if ((other.classname == "player"))
		{
			if ((((teamplay & BOT_RESUPPLYING) && (other.team_no > TF_FLARE_LIT)) && (other.team_no == self.owner.team_no)))
			{
				return;
			}
			CenterPrint (other, "You are on fire!\n");
			stuffcmd (other, "bf\n");
		}
		if ((other.numflames < TF_FLARE_OFF))
		{
			flame = FlameSpawn ("1", other);
			sound (flame, BOT_FIGHTING, "ambience/fire1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			flame = FlameSpawn ("3", other);
			if ((flame == world))
			{
				return;
			}
		}
		flame.classname = "fire";
		flame.health = TF_FLARE_LIT;
		other.numflames = (other.numflames + TF_FLARE_OFF);
		flame.velocity = other.velocity;
		flame.enemy = other;
		flame.touch = OnPlayerFlame_touch;
		flame.owner = self.owner;
		vtemp = (self.origin + '0 0 10');
		setorigin (flame, vtemp);
		flame.nextthink = (time + 0.15);
		flame.think = FlameFollow;
	}
};

void () Flamer_stream_touch =
{
	local entity flame;
	local vector dir;
	local vector vtemp;

	if ((other.classname == "fire"))
	{
		return;
	}
	if ((other != world))
	{
		if (((other.takedamage == BOT_FIGHTING) && (other.health > TF_FLARE_LIT)))
		{
			deathmsg = 15;
			TF_T_Damage (other, self, self.owner, BOT_AI_SCOUT, BOT_FIGHTING, BOT_RESUPPLYING);
			if ((other.numflames >= BOT_MOVING))
			{
				return;
			}
			if ((other.armorclass & BOT_RESUPPLYING))
			{
				if ((other.armorvalue > TF_FLARE_LIT))
				{
					return;
				}
			}
			if ((other.classname == "player"))
			{
				if ((((teamplay & BOT_RESUPPLYING) && (other.team_no > TF_FLARE_LIT)) && (other.team_no == self.owner.team_no)))
				{
					return;
				}
				CenterPrint (other, "You are on fire!\n");
				stuffcmd (other, "bf\n");
			}
			if ((other.numflames < TF_FLARE_OFF))
			{
				flame = FlameSpawn ("1", other);
				sound (flame, BOT_FIGHTING, "ambience/fire1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
			}
			else
			{
				flame = FlameSpawn ("3", other);
				if ((flame == world))
				{
					return;
				}
			}
			flame.classname = "fire";
			flame.health = 45;
			other.numflames = (other.numflames + TF_FLARE_OFF);
			flame.velocity = other.velocity;
			flame.enemy = other;
			flame.touch = OnPlayerFlame_touch;
			flame.owner = self.owner;
			vtemp = self.origin;
			setorigin (flame, vtemp);
			flame.nextthink = (time + 0.1);
			flame.think = FlameFollow;
		}
	}
	else
	{
		if ((random () < 0.3))
		{
			remove (self);
			return;
		}
		flame = FlameSpawn ("4", other);
		if ((flame != world))
		{
			flame.touch = WorldFlame_touch;
			flame.classname = "fire";
			vtemp = (self.origin + '0 0 10');
			setorigin (flame, vtemp);
			flame.nextthink = (time + BOT_DEFEND);
			flame.think = Remove;
			flame.enemy = self.owner;
		}
		remove (self);
	}
};

void () Napalm_touch =
{
	local entity flame;
	local vector dir;
	local vector vtemp;

	if ((other.classname == "fire"))
	{
		return;
	}
	if ((other != world))
	{
		if (((other.takedamage == BOT_FIGHTING) && (other.health > TF_FLARE_LIT)))
		{
			deathmsg = 15;
			TF_T_Damage (other, self, self.owner, BOT_AI_FLEE, BOT_FIGHTING, BOT_RESUPPLYING);
			if ((other.numflames >= BOT_MOVING))
			{
				return;
			}
			if (((other.armorclass & BOT_RESUPPLYING) && (other.armorvalue > TF_FLARE_LIT)))
			{
				return;
			}
			if ((other.classname == "player"))
			{
				if ((((teamplay & BOT_RESUPPLYING) && (other.team_no > TF_FLARE_LIT)) && (other.team_no == self.owner.team_no)))
				{
					return;
				}
				CenterPrint (other, "You are on fire!\n");
				stuffcmd (other, "bf\n");
			}
			if ((other.numflames < TF_FLARE_OFF))
			{
				flame = FlameSpawn ("1", other);
				sound (flame, BOT_FIGHTING, "ambience/fire1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
			}
			else
			{
				flame = FlameSpawn ("3", other);
				if ((flame == world))
				{
					return;
				}
			}
			flame.classname = "fire";
			flame.health = 45;
			other.numflames = (other.numflames + TF_FLARE_OFF);
			flame.velocity = other.velocity;
			flame.enemy = other;
			flame.touch = OnPlayerFlame_touch;
			flame.owner = self.owner;
			vtemp = self.origin;
			setorigin (flame, vtemp);
			flame.nextthink = (time + 0.1);
			flame.think = FlameFollow;
		}
	}
	else
	{
		flame = FlameSpawn ("4", other);
		if ((flame != world))
		{
			flame.touch = WorldFlame_touch;
			flame.classname = "fire";
			vtemp = (self.origin + '0 0 10');
			setorigin (flame, vtemp);
			flame.nextthink = (time + 20);
			flame.think = Remove;
			flame.enemy = self.owner;
		}
		FlameDestroy (self);
	}
};

void (float num_bubbles, vector bub_origin) NewBubbles =
{
	local entity bubble_spawner;

	bubble_spawner = spawn ();
	setorigin (bubble_spawner, bub_origin);
	bubble_spawner.movetype = TF_FLARE_LIT;
	bubble_spawner.solid = TF_FLARE_LIT;
	bubble_spawner.nextthink = (time + 0.1);
	if ((self.classname == "player"))
	{
		bubble_spawner.owner = self;
	}
	else
	{
		bubble_spawner.owner = self.enemy;
	}
	bubble_spawner.think = DeathBubblesSpawn;
	bubble_spawner.bubble_count = num_bubbles;
	return;
};

void () W_FireFlame =
{
	local entity flame;
	local float rn;

	if ((self.waterlevel > BOT_FIGHTING))
	{
		makevectors (self.v_angle);
		NewBubbles (BOT_FIGHTING, (self.origin + (v_forward * 64)));
		rn = random ();
		if ((rn < 0.5))
		{
			sound (self, TF_FLARE_OFF, "misc/water1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			sound (self, TF_FLARE_OFF, "misc/water2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		return;
	}
	self.ammo_cells = (self.ammo_cells - TF_FLARE_OFF);
	self.currentammo = (self.ammo_cells - TF_FLARE_OFF);
	sound (self, TF_FLARE_LIT, "weapons/flmfire2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	flame = spawn ();
	flame.owner = self;
	flame.movetype = BOT_AI_FLAGRUN;
	flame.solid = BOT_FIGHTING;
	flame.classname = "flamerflame";
	makevectors (self.v_angle);
	flame.velocity = aim (self, 10000);
	flame.velocity = (flame.velocity * 600);
	flame.touch = Flamer_stream_touch;
	flame.think = s_explode1;
	flame.nextthink = (time + 0.15);
	setmodel (flame, "progs/s_explod.spr");
	setsize (flame, '0 0 0', '0 0 0');
	setorigin (flame, ((self.origin + (v_forward * BOT_RESUPPLYING)) + '0 0 16'));
};

void () T_IncendiaryTouch =
{
	local float damg;
	local float points;
	local entity head;
	local vector org;

	if ((other == self.owner))
	{
		return;
	}
	if ((pointcontents (self.origin) == -6))
	{
		remove (self);
		return;
	}
	self.effects = (self.effects | BOT_MOVING);
	damg = (30 + (random () * 20));
	if (other.health)
	{
		deathmsg = 15;
		TF_T_Damage (other, self, self.owner, damg, BOT_FIGHTING, BOT_RESUPPLYING);
	}
	head = findradius (self.origin, 180);
	while (head)
	{
		if (head.takedamage)
		{
			deathmsg = 15;
			TF_T_Damage (head, self, self.owner, BOT_AI_SCOUT, BOT_FIGHTING, BOT_RESUPPLYING);
			other = head;
			Napalm_touch ();
			if ((other.classname == "player"))
			{
				stuffcmd (other, "bf\nbf\n");
			}
		}
		head = head.chain;
	}
	self.origin = (self.origin - (BOT_DEFEND * normalize (self.velocity)));
	WriteByte (BOT_MOVING, 23);
	WriteByte (BOT_MOVING, BOT_AI_FOLLOW);
	WriteCoord (BOT_MOVING, self.origin_x);
	WriteCoord (BOT_MOVING, self.origin_y);
	WriteCoord (BOT_MOVING, self.origin_z);
	multicast (self.origin, TF_FLARE_OFF);
	dremove (self);
};

void () W_FireIncendiaryCannon =
{
	if ((self.ammo_rockets < BOT_AI_FOLLOW))
	{
		return;
	}
	self.ammo_rockets = (self.ammo_rockets - BOT_AI_FOLLOW);
	self.currentammo = (self.ammo_rockets - BOT_AI_FOLLOW);
	sound (self, TF_FLARE_OFF, "weapons/sgun1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	KickPlayer (CONTENT_WATER, self);
	newmis = spawn ();
	newmis.owner = self;
	newmis.movetype = BOT_AI_FLAGRUN;
	newmis.solid = BOT_FIGHTING;
	makevectors (self.v_angle);
	newmis.velocity = aim (self, 1000);
	newmis.velocity = (newmis.velocity * 600);
	newmis.angles = vectoangles (newmis.velocity);
	newmis.classname = "rocket";
	newmis.touch = T_IncendiaryTouch;
	newmis.nextthink = (time + BOT_AI_GRAPPLE);
	newmis.think = SUB_Remove;
	newmis.weapon = 33;
	setmodel (newmis, "progs/missile.mdl");
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, ((self.origin + (v_forward * BOT_DEFEND)) + '0 0 16'));
};

void () TeamFortress_IncendiaryCannon =
{
	if (!(self.weapons_carried & 16384))
	{
		return;
	}
	if ((self.ammo_rockets < BOT_AI_FOLLOW))
	{
		sprint (self, BOT_FIGHTING, "not enough ammo.\n");
		return;
	}
	self.current_weapon = 16384;
	W_SetCurrentAmmo ();
};

void () TeamFortress_FlameThrower =
{
	if (!(self.weapons_carried & 4096))
	{
		return;
	}
	if ((self.ammo_cells < TF_FLARE_OFF))
	{
		sprint (self, BOT_FIGHTING, "not enough ammo.\n");
		return;
	}
	self.current_weapon = 4096;
	W_SetCurrentAmmo ();
};
