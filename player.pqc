void () bubble_bob;
void () Throw_Grapple;
void () T_Dispenser;
void () Headless_Think;

void () player_touch =
{
	local entity Bio;
	local float v1;
	local float v2;

	if (((invis_only == TF_FLARE_LIT) && ((self.playerclass == BOT_DEFEND) || (other.playerclass == BOT_DEFEND))))
	{
		if ((other.classname == "player"))
		{
			if (((self.undercover_team != TF_FLARE_LIT) || (self.undercover_skin != TF_FLARE_LIT)))
			{
				if ((((other.playerclass == BOT_DEFEND) || (other.playerclass == TF_FLARE_OFF)) && (other.team_no != self.team_no)))
				{
					sprint (other, BOT_FIGHTING, "Wait a minute... he's a Spy!\n");
					sprint (self, BOT_FIGHTING, "The enemy sees through your disguise!\n");
					Spy_RemoveDisguise (self);
				}
			}
			if (((other.undercover_team != TF_FLARE_LIT) || (other.undercover_skin != TF_FLARE_LIT)))
			{
				if ((((self.playerclass == BOT_DEFEND) || (self.playerclass == TF_FLARE_OFF)) && (self.team_no != other.team_no)))
				{
					sprint (self, BOT_FIGHTING, "Wait a minute... he's a Spy!\n");
					sprint (other, BOT_FIGHTING, "The enemy sees through your disguise!\n");
					Spy_RemoveDisguise (other);
				}
			}
		}
	}
	if ((self.tfstate & BOT_RESUPPLYING))
	{
		if ((other.classname == "player"))
		{
			if (!(other.tfstate & BOT_RESUPPLYING))
			{
				if ((other.playerclass != BOT_AI_GRAPPLE))
				{
					Bio = spawn ();
					Bio.nextthink = BOT_FIGHTING;
					Bio.think = BioInfection_Decay;
					Bio.owner = other;
					Bio.classname = "timer";
					Bio.enemy = self;
					other.tfstate = (other.tfstate | BOT_RESUPPLYING);
					other.infection_team_no = self.infection_team_no;
					sprint (other, TF_FLARE_OFF, "You have been infected by ");
					sprint (other, TF_FLARE_OFF, self.netname);
					sprint (other, TF_FLARE_OFF, "!\n");
					sprint (self, TF_FLARE_OFF, "You have infected ");
					sprint (self, TF_FLARE_OFF, other.netname);
					sprint (self, TF_FLARE_OFF, "!\n");
				}
			}
		}
	}
};

void () player_stand1 = [ 17, player_stand1 ]
{
	self.weaponframe = TF_FLARE_LIT;
	if ((self.velocity_x || self.velocity_y))
	{
		self.walkframe = TF_FLARE_LIT;
		player_run ();
		return;
	}
	if ((self.current_weapon <= BOT_RESUPPLYING))
	{
		if ((self.walkframe >= 12))
		{
			self.walkframe = TF_FLARE_LIT;
		}
		self.frame = (17 + self.walkframe);
	}
	else
	{
		if ((self.walkframe >= BOT_AI_GRAPPLE))
		{
			self.walkframe = TF_FLARE_LIT;
		}
		self.frame = (12 + self.walkframe);
	}
	self.walkframe = (self.walkframe + TF_FLARE_OFF);
};

void () player_run = [ 6, player_run ]
{
	self.weaponframe = TF_FLARE_LIT;
	if ((!self.velocity_x && !self.velocity_y))
	{
		self.walkframe = TF_FLARE_LIT;
		player_stand1 ();
		return;
	}
	if ((self.current_weapon <= BOT_RESUPPLYING))
	{
		if ((self.walkframe == BOT_AI_FLEE))
		{
			self.walkframe = TF_FLARE_LIT;
		}
		self.frame = (TF_FLARE_LIT + self.walkframe);
	}
	else
	{
		if ((self.walkframe == BOT_AI_FLEE))
		{
			self.walkframe = TF_FLARE_LIT;
		}
		self.frame = (self.frame + self.walkframe);
	}
	self.walkframe = (self.walkframe + TF_FLARE_OFF);
};

void () player_shot1 = [ 113, player_shot2 ]
{
	self.weaponframe = TF_FLARE_OFF;
	muzzleflash ();
};

void () player_shot2 = [ 114, player_shot3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_shot3 = [ 115, player_shot4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
};

void () player_shot4 = [ 116, player_shot5 ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_shot5 = [ 117, player_shot6 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_shot6 = [ 118, player_run ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_autorifle1 = [ 113, player_autorifle2 ]
{
	self.weaponframe = TF_FLARE_OFF;
	muzzleflash ();
};

void () player_autorifle2 = [ 114, player_autorifle3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_autorifle3 = [ 118, player_run ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_axe1 = [ 119, player_axe2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_axe2 = [ 120, player_axe3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_axe3 = [ 121, player_axe4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	if ((self.current_weapon == BOT_RESUPPLYING))
	{
		W_FireAxe ();
	}
	else
	{
		W_FireSpanner ();
	}
};

void () player_axe4 = [ 122, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_axeb1 = [ 125, player_axeb2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_axeb2 = [ 126, player_axeb3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_axeb3 = [ 127, player_axeb4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	if ((self.current_weapon == BOT_RESUPPLYING))
	{
		W_FireAxe ();
	}
	else
	{
		W_FireSpanner ();
	}
};

void () player_axeb4 = [ 128, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_axec1 = [ 131, player_axec2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_axec2 = [ 132, player_axec3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_axec3 = [ 133, player_axec4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	if ((self.current_weapon == BOT_RESUPPLYING))
	{
		W_FireAxe ();
	}
	else
	{
		W_FireSpanner ();
	}
};

void () player_axec4 = [ 134, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_axed1 = [ 137, player_axed2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_axed2 = [ 138, player_axed3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_axed3 = [ 139, player_axed4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	if ((self.current_weapon == BOT_RESUPPLYING))
	{
		W_FireAxe ();
	}
	else
	{
		W_FireSpanner ();
	}
};

void () player_axed4 = [ 140, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_chain1 = [ 137, player_chain1a ]
{
	self.weaponframe = TF_FLARE_OFF;
	Throw_Grapple ();
};

void () player_chain1a = [ 137, player_chain2 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_chain2 = [ 138, player_chain2a ]
{
	self.weaponframe = BOT_AI_FOLLOW;
};

void () player_chain2a = [ 138, player_chain3 ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_chain3 = [ 139, player_chain3 ]
{
	self.weaponframe = BOT_AI_FLEE;
	if (!self.hook_out)
	{
		player_chain5 ();
		return;
	}
	if ((vlen (self.velocity) >= 750))
	{
		player_chain4 ();
		return;
	}
};

void () player_chain4 = [ 73, player_chain4 ]
{
	self.weaponframe = BOT_AI_FLEE;
	if (!self.hook_out)
	{
		player_chain5 ();
		return;
	}
	if ((vlen (self.velocity) < 750))
	{
		player_chain3 ();
		return;
	}
};

void () player_chain5 = [ 140, player_run ]
{
	self.weaponframe = TF_FLARE_LIT;
};

void () player_medikit1 = [ 119, player_medikit2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_medikit2 = [ 120, player_medikit3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_medikit3 = [ 121, player_medikit4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	W_FireMedikit ();
};

void () player_medikit4 = [ 122, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_medikitb1 = [ 125, player_medikitb2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_medikitb2 = [ 126, player_medikitb3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_medikitb3 = [ 127, player_medikitb4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	W_FireMedikit ();
};

void () player_medikitb4 = [ 128, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_medikitc1 = [ 131, player_medikitc2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_medikitc2 = [ 132, player_medikitc3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_medikitc3 = [ 133, player_medikitc4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	W_FireMedikit ();
};

void () player_medikitc4 = [ 134, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_medikitd1 = [ 137, player_medikitd2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_medikitd2 = [ 138, player_medikitd3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_medikitd3 = [ 139, player_medikitd4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	W_FireMedikit ();
};

void () player_medikitd4 = [ 140, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_bioweapon1 = [ 119, player_bioweapon2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_bioweapon2 = [ 120, player_bioweapon3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_bioweapon3 = [ 121, player_bioweapon4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	W_FireBioweapon ();
};

void () player_bioweapon4 = [ 122, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_bioweaponb1 = [ 125, player_bioweaponb2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_bioweaponb2 = [ 126, player_bioweaponb3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_bioweaponb3 = [ 127, player_bioweaponb4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	W_FireBioweapon ();
};

void () player_bioweaponb4 = [ 128, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_bioweaponc1 = [ 131, player_bioweaponc2 ]
{
	self.weaponframe = TF_FLARE_OFF;
};

void () player_bioweaponc2 = [ 132, player_bioweaponc3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_bioweaponc3 = [ 133, player_bioweaponc4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
	W_FireBioweapon ();
};

void () player_bioweaponc4 = [ 134, player_run ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_bioweapond1 = [ 137, player_bioweapond2 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_bioweapond2 = [ 138, player_bioweapond3 ]
{
	self.weaponframe = BOT_AI_FLEE;
};

void () player_bioweapond3 = [ 139, player_bioweapond4 ]
{
	self.weaponframe = BOT_AI_BLAST;
	W_FireBioweapon ();
};

void () player_bioweapond4 = [ 140, player_run ]
{
	self.weaponframe = BOT_DEFEND;
};

void () player_nail1 = [ 103, player_nail2 ]
{
	muzzleflash ();
	if ((!self.button0 || intermission_running))
	{
		player_run ();
		return;
	}
	self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
	if ((self.weaponframe == BOT_AI_FLAGRUN))
	{
		self.weaponframe = TF_FLARE_OFF;
	}
	SuperDamageSound ();
	W_FireSpikes (BOT_MOVING);
	Attack_Finished (0.2);
};

void () player_nail2 = [ 104, player_nail1 ]
{
	if ((!self.button0 || intermission_running))
	{
		player_run ();
		return;
	}
	self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
	if ((self.weaponframe == BOT_AI_FLAGRUN))
	{
		self.weaponframe = TF_FLARE_OFF;
	}
	SuperDamageSound ();
	W_FireSpikes (-4);
	Attack_Finished (0.2);
};

void () player_assaultcannonup1 = [ 103, player_assaultcannonup2 ]
{
	if (((!self.button0 || (self.ammo_shells < TF_FLARE_OFF)) || intermission_running))
	{
		self.tfstate = (self.tfstate - (self.tfstate & 65536));
		TeamFortress_SetSpeed (self);
		self.count = TF_FLARE_OFF;
		self.heat = TF_FLARE_LIT;
		player_assaultcannondown1 ();
		return;
	}
	self.fire_held_down = TF_FLARE_OFF;
	if ((self.heat == TF_FLARE_OFF))
	{
		sound (self, TF_FLARE_OFF, "weapons/asscan1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	}
	SuperDamageSound ();
	Attack_Finished (0.1);
	if (((self.heat != BOT_FIGHTING) && (self.heat != BOT_MOVING)))
	{
		if ((self.weaponframe >= BOT_AI_FOLLOW))
		{
			self.weaponframe = TF_FLARE_LIT;
		}
		else
		{
			self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
		}
	}
	self.heat = (self.heat + TF_FLARE_OFF);
	if ((self.heat >= BOT_AI_BLAST))
	{
		self.heat = TF_FLARE_LIT;
		player_assaultcannon1 ();
	}
};

void () player_assaultcannonup2 = [ 103, player_assaultcannonup1 ]
{
	if (((!self.button0 || (self.ammo_shells < TF_FLARE_OFF)) || intermission_running))
	{
		self.tfstate = (self.tfstate - (self.tfstate & 65536));
		TeamFortress_SetSpeed (self);
		self.count = TF_FLARE_OFF;
		self.heat = TF_FLARE_LIT;
		player_assaultcannondown1 ();
		return;
	}
	SuperDamageSound ();
	Attack_Finished (0.1);
	if ((((self.heat != BOT_FIGHTING) && (self.heat != BOT_MOVING)) && (self.heat != BOT_AI_BLAST)))
	{
		if (((self.weaponframe == BOT_FIGHTING) && (self.heat >= BOT_AI_FLAGRUN)))
		{
			self.weaponframe = TF_FLARE_LIT;
		}
		else
		{
			if ((self.weaponframe >= BOT_AI_FOLLOW))
			{
				self.weaponframe = TF_FLARE_LIT;
			}
			else
			{
				self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
			}
		}
	}
	self.heat = (self.heat + TF_FLARE_OFF);
	if ((self.heat >= 13))
	{
		self.heat = TF_FLARE_LIT;
		player_assaultcannon1 ();
	}
};

void () player_assaultcannon1 = [ 103, player_assaultcannon2 ]
{
	local string st;

	muzzleflash ();
	sound (self, TF_FLARE_OFF, "weapons/asscan2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if (((!self.button0 || (self.ammo_shells < TF_FLARE_OFF)) || intermission_running))
	{
		stuffcmd (self, "v_idlescale 0\n");
		self.tfstate = (self.tfstate - (self.tfstate & 65536));
		TeamFortress_SetSpeed (self);
		self.weaponframe = TF_FLARE_LIT;
		self.count = TF_FLARE_OFF;
		player_assaultcannondown1 ();
		return;
	}
	if ((self.weaponframe == BOT_FIGHTING))
	{
		self.weaponframe = BOT_MOVING;
	}
	else
	{
		self.weaponframe = BOT_FIGHTING;
	}
	SuperDamageSound ();
	W_FireAssaultCannon ();
	stuffcmd (self, "v_idlescale ");
	if ((self.heat < BOT_AI_GRAPPLE))
	{
		st = ftos ((self.heat * BOT_MOVING));
	}
	else
	{
		st = "20";
	}
	stuffcmd (self, st);
	stuffcmd (self, "\n");
	Attack_Finished (0.1);
};

void () player_assaultcannon2 = [ 104, player_assaultcannon1 ]
{
	local string st;

	if (((!self.button0 || (self.ammo_shells < TF_FLARE_OFF)) || intermission_running))
	{
		stuffcmd (self, "v_idlescale 0\n");
		self.tfstate = (self.tfstate - (self.tfstate & 65536));
		TeamFortress_SetSpeed (self);
		self.weaponframe = TF_FLARE_LIT;
		self.count = TF_FLARE_OFF;
		player_assaultcannondown1 ();
		return;
	}
	if ((self.weaponframe == BOT_FIGHTING))
	{
		self.weaponframe = BOT_MOVING;
	}
	else
	{
		self.weaponframe = BOT_FIGHTING;
	}
	SuperDamageSound ();
	W_FireAssaultCannon ();
	self.heat = (self.heat + 0.1);
	stuffcmd (self, "v_idlescale 0\n");
	stuffcmd (self, "bf\n");
	Attack_Finished (0.1);
};

void () player_assaultcannondown1 = [ 103, player_assaultcannondown1 ]
{
	local entity tcool;

	if ((self.count == TF_FLARE_OFF))
	{
		sound (self, TF_FLARE_OFF, "weapons/asscan3.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	}
	if ((self.count >= 15))
	{
		self.heat = TF_FLARE_LIT;
		self.fire_held_down = TF_FLARE_LIT;
		self.tfstate = (self.tfstate - (self.tfstate & 65536));
		TeamFortress_SetSpeed (self);
		if (((self.ammo_shells < TF_FLARE_OFF) || (self.ammo_cells < BOT_AI_FLEE)))
		{
			self.current_weapon = W_BestWeapon ();
			W_SetCurrentAmmo ();
			W_PrintWeaponMessage ();
			return;
		}
		player_run ();
		return;
	}
	if (((((self.count != BOT_DEFEND) && (self.count != BOT_AI_SCOUT)) && (self.count != 12)) && (self.count != 14)))
	{
		if ((self.weaponframe == BOT_AI_FOLLOW))
		{
			self.weaponframe = TF_FLARE_LIT;
		}
		else
		{
			self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
		}
	}
	self.count = (self.count + TF_FLARE_OFF);
	Attack_Finished (0.1);
};

void () player_light1 = [ 105, player_light2 ]
{
	muzzleflash ();
	if ((!self.button0 || intermission_running))
	{
		player_run ();
		return;
	}
	self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
	if ((self.weaponframe == BOT_AI_GRAPPLE))
	{
		self.weaponframe = TF_FLARE_OFF;
	}
	SuperDamageSound ();
	W_FireLightning ();
	Attack_Finished (0.2);
};

void () player_light2 = [ 106, player_light1 ]
{
	if ((!self.button0 || intermission_running))
	{
		player_run ();
		return;
	}
	self.weaponframe = (self.weaponframe + TF_FLARE_OFF);
	if ((self.weaponframe == BOT_AI_GRAPPLE))
	{
		self.weaponframe = TF_FLARE_OFF;
	}
	SuperDamageSound ();
	W_FireLightning ();
	Attack_Finished (0.2);
};

void () player_rocket1 = [ 107, player_rocket2 ]
{
	self.weaponframe = TF_FLARE_OFF;
	muzzleflash ();
};

void () player_rocket2 = [ 108, player_rocket3 ]
{
	self.weaponframe = BOT_FIGHTING;
};

void () player_rocket3 = [ 109, player_rocket4 ]
{
	self.weaponframe = BOT_AI_FOLLOW;
};

void () player_rocket4 = [ 110, player_rocket5 ]
{
	self.weaponframe = BOT_MOVING;
};

void () player_rocket5 = [ 111, player_rocket6 ]
{
	self.weaponframe = BOT_AI_GRAPPLE;
};

void () player_rocket6 = [ 112, player_run ]
{
	self.weaponframe = BOT_AI_FLEE;
};
void (float num_bubbles) DeathBubbles;

void () PainSound =
{
	local float rs;

	if ((self.health < TF_FLARE_LIT))
	{
		return;
	}
	if ((damage_attacker.classname == "teledeath"))
	{
		sound (self, BOT_FIGHTING, "player/teledth1.wav", TF_FLARE_OFF, TF_FLARE_LIT);
		return;
	}
	if (((self.watertype == CONTENT_WATER) && (self.waterlevel == BOT_AI_FOLLOW)))
	{
		DeathBubbles (TF_FLARE_OFF);
		if ((random () > 0.5))
		{
			sound (self, BOT_FIGHTING, "player/drown1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			sound (self, BOT_FIGHTING, "player/drown2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		return;
	}
	if ((self.watertype == -4))
	{
		if ((random () > 0.5))
		{
			sound (self, BOT_FIGHTING, "player/lburn1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			sound (self, BOT_FIGHTING, "player/lburn2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		return;
	}
	if ((self.watertype == CONTENT_LAVA))
	{
		if ((random () > 0.5))
		{
			sound (self, BOT_FIGHTING, "player/lburn1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			sound (self, BOT_FIGHTING, "player/lburn2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		return;
	}
	if ((self.pain_finished > time))
	{
		self.axhitme = TF_FLARE_LIT;
		return;
	}
	self.pain_finished = (time + 0.5);
	if ((self.axhitme == TF_FLARE_OFF))
	{
		self.axhitme = TF_FLARE_LIT;
		sound (self, BOT_FIGHTING, "player/axhit1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		return;
	}
	rs = rint (((random () * BOT_AI_GRAPPLE) + TF_FLARE_OFF));
	self.noise = "";
	if ((rs == TF_FLARE_OFF))
	{
		self.noise = "player/pain1.wav";
	}
	else
	{
		if ((rs == BOT_FIGHTING))
		{
			self.noise = "player/pain2.wav";
		}
		else
		{
			if ((rs == BOT_AI_FOLLOW))
			{
				self.noise = "player/pain3.wav";
			}
			else
			{
				if ((rs == BOT_MOVING))
				{
					self.noise = "player/pain4.wav";
				}
				else
				{
					if ((rs == BOT_AI_GRAPPLE))
					{
						self.noise = "player/pain5.wav";
					}
					else
					{
						self.noise = "player/pain6.wav";
					}
				}
			}
		}
	}
	sound (self, BOT_FIGHTING, self.noise, TF_FLARE_OFF, TF_FLARE_OFF);
	return;
};

void () player_pain1 = [ 35, player_pain2 ]
{
	PainSound ();
	self.weaponframe = TF_FLARE_LIT;
};

void () player_pain2 = [ 36, player_pain3 ]
{
};

void () player_pain3 = [ 37, player_pain4 ]
{
};

void () player_pain4 = [ 38, player_pain5 ]
{
};

void () player_pain5 = [ 39, player_pain6 ]
{
};

void () player_pain6 = [ 40, player_run ]
{
};

void () player_axpain1 = [ 29, player_axpain2 ]
{
	PainSound ();
	self.weaponframe = TF_FLARE_LIT;
};

void () player_axpain2 = [ 30, player_axpain3 ]
{
};

void () player_axpain3 = [ 31, player_axpain4 ]
{
};

void () player_axpain4 = [ 32, player_axpain5 ]
{
};

void () player_axpain5 = [ 33, player_axpain6 ]
{
};

void () player_axpain6 = [ 34, player_run ]
{
};

void () player_pain =
{
	if (self.weaponframe)
	{
		return;
	}
	if ((self.invisible_finished > time))
	{
		return;
	}
	if (self.is_feigning)
	{
		PainSound ();
		return;
	}
	if ((self.button0 && (self.current_weapon == 32768)))
	{
		return;
	}
	if ((self.current_weapon <= BOT_RESUPPLYING))
	{
		player_axpain1 ();
	}
	else
	{
		player_pain1 ();
	}
};
void () player_diea1;
void () player_dieb1;
void () player_diec1;
void () player_died1;
void () player_diee1;
void () player_die_ax1;

void () DeathBubblesSpawn =
{
	if ((self.owner.waterlevel != BOT_AI_FOLLOW))
	{
		return;
	}
	newmis = spawn ();
	setmodel (newmis, "progs/s_bubble.spr");
	setorigin (newmis, (self.owner.origin + '0 0 24'));
	newmis.movetype = BOT_DEFEND;
	newmis.solid = TF_FLARE_LIT;
	newmis.velocity = '0 0 15';
	newmis.nextthink = (time + 0.5);
	newmis.think = bubble_bob;
	newmis.classname = "bubble";
	newmis.frame = TF_FLARE_LIT;
	newmis.cnt = TF_FLARE_LIT;
	setsize (newmis, '-8 -8 -8', '8 8 8');
	self.nextthink = (time + 0.1);
	self.think = DeathBubblesSpawn;
	self.air_finished = (self.air_finished + TF_FLARE_OFF);
	if ((self.air_finished >= self.bubble_count))
	{
		dremove (self);
	}
};

void (float num_bubbles) DeathBubbles =
{
	local entity bubble_spawner;

	bubble_spawner = spawn ();
	setorigin (bubble_spawner, self.origin);
	bubble_spawner.movetype = TF_FLARE_LIT;
	bubble_spawner.solid = TF_FLARE_LIT;
	bubble_spawner.nextthink = (time + 0.1);
	bubble_spawner.think = DeathBubblesSpawn;
	bubble_spawner.air_finished = TF_FLARE_LIT;
	bubble_spawner.owner = self;
	bubble_spawner.bubble_count = num_bubbles;
	return;
};

void () DeathSound =
{
	local float rs;

	if ((self.waterlevel == BOT_AI_FOLLOW))
	{
		if (self.is_feigning)
		{
			DeathBubbles (BOT_FIGHTING);
		}
		else
		{
			DeathBubbles (BOT_AI_SCOUT);
		}
		sound (self, BOT_FIGHTING, "player/h2odeath.wav", TF_FLARE_OFF, TF_FLARE_LIT);
		return;
	}
	rs = rint (((random () * BOT_MOVING) + TF_FLARE_OFF));
	if ((rs == TF_FLARE_OFF))
	{
		self.noise = "player/death1.wav";
	}
	if ((rs == BOT_FIGHTING))
	{
		self.noise = "player/death2.wav";
	}
	if ((rs == BOT_AI_FOLLOW))
	{
		self.noise = "player/death3.wav";
	}
	if ((rs == BOT_MOVING))
	{
		self.noise = "player/death4.wav";
	}
	if ((rs == BOT_AI_GRAPPLE))
	{
		self.noise = "player/death5.wav";
	}
	sound (self, BOT_FIGHTING, self.noise, TF_FLARE_OFF, TF_FLARE_LIT);
	return;
};

void () PlayerDead =
{
	self.nextthink = CONTENT_EMPTY;
	self.deadflag = BOT_FIGHTING;
};

vector (float dm) VelocityForDamage =
{
	local vector v;

	v_x = (100 * crandom ());
	v_y = (100 * crandom ());
	v_z = (BOT_IMPULSE + (100 * random ()));
	if ((dm > -50))
	{
		v = (v * 0.7);
	}
	else
	{
		if ((dm > -200))
		{
			v = (v * BOT_FIGHTING);
		}
		else
		{
			v = (v * BOT_AI_SCOUT);
		}
	}
	return (v);
};

void (string gibname, float dm) ThrowGib =
{
	newmis = spawn ();
	newmis.origin = self.origin;
	setmodel (newmis, gibname);
	setsize (newmis, '0 0 0', '0 0 0');
	newmis.velocity = VelocityForDamage (dm);
	newmis.movetype = BOT_AI_SCOUT;
	newmis.solid = TF_FLARE_LIT;
	newmis.avelocity_x = (random () * 600);
	newmis.avelocity_y = (random () * 600);
	newmis.avelocity_z = (random () * 600);
	newmis.think = SUB_Remove;
	newmis.ltime = time;
	newmis.nextthink = ((time + BOT_AI_SCOUT) + (random () * BOT_AI_SCOUT));
	newmis.frame = TF_FLARE_LIT;
	newmis.flags = TF_FLARE_LIT;
};

void (string gibname, float dm) ThrowHead =
{
	setmodel (self, gibname);
	self.skin = TF_FLARE_LIT;
	self.frame = TF_FLARE_LIT;
	self.nextthink = CONTENT_EMPTY;
	self.movetype = BOT_AI_SCOUT;
	self.takedamage = TF_FLARE_LIT;
	self.solid = TF_FLARE_LIT;
	self.view_ofs = '0 0 8';
	setsize (self, '-16 -16 0', '16 16 56');
	self.velocity = VelocityForDamage (dm);
	self.origin_z = (self.origin_z - 24);
	self.flags = (self.flags - (self.flags & FL_ONGROUND));
	self.avelocity = (crandom () * '0 600 0');
};

void (string gibname) HeadShotThrowHead =
{
	setmodel (self, gibname);
	self.frame = TF_FLARE_LIT;
	self.nextthink = CONTENT_EMPTY;
	self.movetype = BOT_AI_SCOUT;
	self.takedamage = TF_FLARE_LIT;
	self.solid = TF_FLARE_LIT;
	self.view_ofs = '0 0 8';
	setsize (self, '-16 -16 0', '16 16 56');
	self.velocity = (normalize (self.head_shot_vector) * 600);
	self.origin_z = (self.origin_z + 24);
	self.flags = (self.flags - (self.flags & FL_ONGROUND));
	self.avelocity = '0 0 0';
};

void () KillPlayer =
{
	self.owner.deadflag = BOT_FIGHTING;
	dremove (self);
};

void () GibPlayer =
{
	ThrowHead ("progs/h_player.mdl", self.health);
	ThrowGib ("progs/gib1.mdl", self.health);
	ThrowGib ("progs/gib2.mdl", self.health);
	ThrowGib ("progs/gib3.mdl", self.health);
	if ((deathmsg == 36))
	{
		newmis = spawn ();
		newmis.owner = self;
		newmis.think = KillPlayer;
		newmis.nextthink = (time + TF_FLARE_OFF);
	}
	else
	{
		self.deadflag = BOT_FIGHTING;
	}
	TeamFortress_SetupRespawn (TF_FLARE_LIT);
	if ((damage_attacker.classname == "teledeath"))
	{
		sound (self, BOT_FIGHTING, "player/teledth1.wav", TF_FLARE_OFF, TF_FLARE_LIT);
		self.respawn_time = (self.respawn_time + BOT_FIGHTING);
		return;
	}
	if ((damage_attacker.classname == "teledeath2"))
	{
		sound (self, BOT_FIGHTING, "player/teledth1.wav", TF_FLARE_OFF, TF_FLARE_LIT);
		self.respawn_time = (self.respawn_time + BOT_FIGHTING);
		return;
	}
	if ((random () < 0.5))
	{
		sound (self, BOT_FIGHTING, "player/gib.wav", TF_FLARE_OFF, TF_FLARE_LIT);
	}
	else
	{
		sound (self, BOT_FIGHTING, "player/udeath.wav", TF_FLARE_OFF, TF_FLARE_LIT);
	}
};

void () PlayerDie =
{
	local float i;
	local entity te;

	if (self.hook_out)
	{
		Reset_Grapple (self.hook);
		Attack_Finished (0.75);
		self.hook_out = TF_FLARE_OFF;
	}
	self.items = (self.items - (self.items & IT_INVISIBILITY));
	self.invisible_finished = TF_FLARE_LIT;
	self.invincible_finished = TF_FLARE_LIT;
	self.super_damage_finished = TF_FLARE_LIT;
	self.radsuit_finished = TF_FLARE_LIT;
	self.modelindex = modelindex_player;
	if (((self.tfstate & BOT_RESUPPLYING) && (self == self.enemy)))
	{
		te = find (world, classname, "timer");
		while (te)
		{
			if (((te.owner == self) && (te.think == BioInfection_Decay)))
			{
				logfrag (te.enemy, self);
				te.enemy.real_frags = (te.enemy.real_frags + TF_FLARE_OFF);
				if (!(toggleflags & 128))
				{
					te.enemy.frags = te.enemy.real_frags;
				}
			}
			te = find (te, classname, "timer");
		}
	}
	TeamFortress_RemoveTimers ();
	if ((deathmatch || coop))
	{
		DropBackpack ();
	}
	self.weaponmodel = "";
	self.view_ofs = '0 0 -8';
	self.deadflag = TF_FLARE_OFF;
	self.solid = TF_FLARE_LIT;
	self.flags = (self.flags - (self.flags & FL_ONGROUND));
	self.movetype = BOT_AI_FLEE;
	if ((self.velocity_z < BOT_AI_SCOUT))
	{
		self.velocity_z = (self.velocity_z + (random () * 300));
	}
	if ((self.health < -40))
	{
		GibPlayer ();
		return;
	}
	DeathSound ();
	self.angles_x = TF_FLARE_LIT;
	self.angles_z = TF_FLARE_LIT;
	if ((self.current_weapon <= BOT_RESUPPLYING))
	{
		player_die_ax1 ();
		TeamFortress_SetupRespawn (TF_FLARE_LIT);
		return;
	}
	i = (TF_FLARE_OFF + floor ((random () * BOT_AI_FLEE)));
	if ((i == TF_FLARE_OFF))
	{
		player_diea1 ();
	}
	else
	{
		if ((i == BOT_FIGHTING))
		{
			player_dieb1 ();
		}
		else
		{
			if ((i == BOT_AI_FOLLOW))
			{
				player_diec1 ();
			}
			else
			{
				if ((i == BOT_MOVING))
				{
					player_died1 ();
				}
				else
				{
					player_diee1 ();
				}
			}
		}
	}
	TeamFortress_SetupRespawn (TF_FLARE_LIT);
};

void () set_suicide_frame =
{
	if ((self.model != "progs/player.mdl"))
	{
		return;
	}
	setmodel (self, string_null);
	setsize (self, VEC_HULL_MIN, VEC_HULL_MAX);
};

void () player_diea1 = [ 50, player_diea2 ]
{
};

void () player_diea2 = [ 51, player_diea3 ]
{
};

void () player_diea3 = [ 52, player_diea4 ]
{
};

void () player_diea4 = [ 53, player_diea5 ]
{
};

void () player_diea5 = [ 54, player_diea6 ]
{
};

void () player_diea6 = [ 55, player_diea7 ]
{
};

void () player_diea7 = [ 56, player_diea8 ]
{
};

void () player_diea8 = [ 57, player_diea9 ]
{
};

void () player_diea9 = [ 58, player_diea10 ]
{
};

void () player_diea10 = [ 59, player_diea11 ]
{
};

void () player_diea11 = [ 60, player_diea11 ]
{
	PlayerDead ();
};

void () player_dieb1 = [ 61, player_dieb2 ]
{
};

void () player_dieb2 = [ 62, player_dieb3 ]
{
};

void () player_dieb3 = [ 63, player_dieb4 ]
{
};

void () player_dieb4 = [ 64, player_dieb5 ]
{
};

void () player_dieb5 = [ 65, player_dieb6 ]
{
};

void () player_dieb6 = [ 66, player_dieb7 ]
{
};

void () player_dieb7 = [ 67, player_dieb8 ]
{
};

void () player_dieb8 = [ 68, player_dieb9 ]
{
};

void () player_dieb9 = [ 69, player_dieb9 ]
{
	PlayerDead ();
};

void () player_diec1 = [ 70, player_diec2 ]
{
};

void () player_diec2 = [ 71, player_diec3 ]
{
};

void () player_diec3 = [ 72, player_diec4 ]
{
};

void () player_diec4 = [ 73, player_diec5 ]
{
};

void () player_diec5 = [ 74, player_diec6 ]
{
};

void () player_diec6 = [ 75, player_diec7 ]
{
};

void () player_diec7 = [ 76, player_diec8 ]
{
};

void () player_diec8 = [ 77, player_diec9 ]
{
};

void () player_diec9 = [ 78, player_diec10 ]
{
};

void () player_diec10 = [ 79, player_diec11 ]
{
};

void () player_diec11 = [ 80, player_diec12 ]
{
};

void () player_diec12 = [ 81, player_diec13 ]
{
};

void () player_diec13 = [ 82, player_diec14 ]
{
};

void () player_diec14 = [ 83, player_diec15 ]
{
};

void () player_diec15 = [ 84, player_diec15 ]
{
	PlayerDead ();
};

void () player_died1 = [ 85, player_died2 ]
{
};

void () player_died2 = [ 86, player_died3 ]
{
};

void () player_died3 = [ 87, player_died4 ]
{
};

void () player_died4 = [ 88, player_died5 ]
{
};

void () player_died5 = [ 89, player_died6 ]
{
};

void () player_died6 = [ 90, player_died7 ]
{
};

void () player_died7 = [ 91, player_died8 ]
{
};

void () player_died8 = [ 92, player_died9 ]
{
};

void () player_died9 = [ 93, player_died9 ]
{
	PlayerDead ();
};

void () player_diee1 = [ 94, player_diee2 ]
{
};

void () player_diee2 = [ 95, player_diee3 ]
{
};

void () player_diee3 = [ 96, player_diee4 ]
{
};

void () player_diee4 = [ 97, player_diee5 ]
{
};

void () player_diee5 = [ 98, player_diee6 ]
{
};

void () player_diee6 = [ 99, player_diee7 ]
{
};

void () player_diee7 = [ 100, player_diee8 ]
{
};

void () player_diee8 = [ 101, player_diee9 ]
{
};

void () player_diee9 = [ 102, player_diee9 ]
{
	PlayerDead ();
};

void () player_die_ax1 = [ 41, player_die_ax2 ]
{
};

void () player_die_ax2 = [ 42, player_die_ax3 ]
{
};

void () player_die_ax3 = [ 43, player_die_ax4 ]
{
};

void () player_die_ax4 = [ 44, player_die_ax5 ]
{
};

void () player_die_ax5 = [ 45, player_die_ax6 ]
{
};

void () player_die_ax6 = [ 46, player_die_ax7 ]
{
};

void () player_die_ax7 = [ 47, player_die_ax8 ]
{
};

void () player_die_ax8 = [ 48, player_die_ax9 ]
{
};

void () player_die_ax9 = [ 49, player_die_ax9 ]
{
	PlayerDead ();
};

void () Headless_Think =
{
	self.frame = (self.frame + TF_FLARE_OFF);
	if (((self.frame == BOT_AI_BLAST) || (self.frame == 18)))
	{
		self.nextthink = ((time + BOT_AI_SCOUT) + (random () * BOT_AI_SCOUT));
		self.think = SUB_Remove;
		return;
	}
	self.nextthink = (time + 0.1);
};
