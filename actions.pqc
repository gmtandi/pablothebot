
void () TeamFortress_Discard =
{
	newmis = spawn ();
	newmis.classname = "item_backpack";
	if ((self.playerclass == TF_FLARE_OFF))
	{
		newmis.ammo_rockets = self.ammo_rockets;
	}
	else
	{
		if ((self.playerclass == BOT_FIGHTING))
		{
			newmis.ammo_rockets = self.ammo_rockets;
			newmis.ammo_cells = self.ammo_cells;
		}
		else
		{
			if ((self.playerclass == BOT_AI_FOLLOW))
			{
				newmis.ammo_cells = self.ammo_cells;
				newmis.ammo_nails = self.ammo_nails;
			}
			else
			{
				if ((self.playerclass == BOT_MOVING))
				{
					newmis.ammo_cells = self.ammo_cells;
					newmis.ammo_nails = self.ammo_nails;
				}
				else
				{
					if ((self.playerclass == BOT_AI_GRAPPLE))
					{
						newmis.ammo_rockets = self.ammo_rockets;
						newmis.ammo_cells = self.ammo_cells;
					}
					else
					{
						if ((self.playerclass == BOT_AI_FLEE))
						{
							newmis.ammo_rockets = self.ammo_rockets;
							newmis.ammo_nails = self.ammo_nails;
						}
						else
						{
							if ((self.playerclass == BOT_AI_BLAST))
							{
								newmis.ammo_nails = self.ammo_nails;
							}
							else
							{
								if ((self.playerclass == BOT_DEFEND))
								{
									newmis.ammo_rockets = self.ammo_rockets;
								}
								else
								{
									if ((self.playerclass == BOT_AI_FLAGRUN))
									{
										newmis.ammo_rockets = self.ammo_rockets;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if (!(((newmis.ammo_shells + newmis.ammo_nails) + newmis.ammo_rockets) + newmis.ammo_cells))
	{
		dremove (newmis);
		return;
	}
	if (newmis.ammo_shells)
	{
		self.ammo_shells = TF_FLARE_LIT;
	}
	if (newmis.ammo_nails)
	{
		self.ammo_nails = TF_FLARE_LIT;
	}
	if (newmis.ammo_rockets)
	{
		self.ammo_rockets = TF_FLARE_LIT;
	}
	if (newmis.ammo_cells)
	{
		self.ammo_cells = TF_FLARE_LIT;
	}
	W_SetCurrentAmmo ();
	sound (self, BOT_AI_FOLLOW, "weapons/lock4.wav", TF_FLARE_OFF, TF_FLARE_OFF);
	if ((self.team_no != TF_FLARE_LIT))
	{
		increment_team_ammoboxes (self.team_no);
		if ((num_team_ammoboxes (self.team_no) > (20 / number_of_teams)))
		{
			RemoveOldAmmobox (self.team_no);
		}
	}
	else
	{
		num_world_ammoboxes = (num_world_ammoboxes + TF_FLARE_OFF);
		if ((num_world_ammoboxes > 20))
		{
			RemoveOldAmmobox (TF_FLARE_LIT);
		}
	}
	newmis.enemy = self;
	newmis.health = time;
	newmis.weapon = TF_FLARE_LIT;
	newmis.movetype = BOT_AI_FLEE;
	newmis.solid = TF_FLARE_OFF;
	newmis.classname = "ammobox";
	newmis.team_no = self.team_no;
	makevectors (self.v_angle);
	if (self.v_angle_x)
	{
		newmis.velocity = ((v_forward * 400) + (v_up * BOT_IMPULSE));
	}
	else
	{
		newmis.velocity = aim (self, 10000);
		newmis.velocity = (newmis.velocity * 400);
		newmis.velocity_z = BOT_IMPULSE;
	}
	newmis.avelocity = '0 300 0';
	setsize (newmis, '0 0 0', '0 0 0');
	setorigin (newmis, self.origin);
	newmis.nextthink = (time + 30);
	newmis.think = SUB_Remove;
	newmis.touch = TeamFortress_AmmoboxTouch;
	setmodel (newmis, "progs/backpack.mdl");
};

void () TeamFortress_SaveMe =
{
	local entity te;
	local entity tl;

	if ((self.last_saveme_sound < time))
	{
		if ((random () < 0.8))
		{
			sound (self, TF_FLARE_OFF, "speech/saveme1.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		else
		{
			sound (self, TF_FLARE_OFF, "speech/saveme2.wav", TF_FLARE_OFF, TF_FLARE_OFF);
		}
		self.last_saveme_sound = (time + BOT_MOVING);
	}
	te = find (world, classname, "player");
	while (te)
	{
		if (((((self == te) || (te.playerclass == BOT_AI_GRAPPLE)) || (te.playerclass == BOT_AI_FLAGRUN)) || (te.playerclass == BOT_DEFEND)))
		{
			if ((((te.team_no == self.team_no) && (self.team_no != TF_FLARE_LIT)) || (te.playerclass == BOT_DEFEND)))
			{
				if (visible (te))
				{
					msg_entity = te;
					tl = spawn ();
					tl.origin = self.origin;
					tl.origin_z = (tl.origin_z + BOT_AVOIDING_HAZARD);
					WriteByte (TF_FLARE_OFF, 23);
					WriteByte (TF_FLARE_OFF, BOT_AI_FLAGRUN);
					WriteEntity (TF_FLARE_OFF, tl);
					WriteCoord (TF_FLARE_OFF, tl.origin_x);
					WriteCoord (TF_FLARE_OFF, tl.origin_y);
					WriteCoord (TF_FLARE_OFF, (tl.origin_z + 24));
					WriteCoord (TF_FLARE_OFF, self.origin_x);
					WriteCoord (TF_FLARE_OFF, self.origin_y);
					WriteCoord (TF_FLARE_OFF, self.origin_z);
					dremove (tl);
				}
			}
		}
		te = find (te, classname, "player");
	}
};

void () TeamFortress_ID =
{
	local vector src;
	local string st;
	local string cls;

	src = (self.origin + (v_forward * BOT_AI_SCOUT));
	src_z = (self.absmin_z + (self.size_z * 0.7));
	traceline (src, (src + (v_forward * FL_WATERJUMP)), TF_FLARE_LIT, self);
	if (((trace_ent != world) && (trace_ent.origin != world.origin)))
	{
		if (((trace_ent.classname == "player") && (trace_ent.health > TF_FLARE_LIT)))
		{
			self.StatusRefreshTime = (time + 1.5);
			if (((self.team_no != TF_FLARE_LIT) && (self.team_no == trace_ent.team_no)))
			{
				cls = TeamFortress_GetClassName (trace_ent.playerclass);
				if ((self.playerclass == BOT_AI_GRAPPLE))
				{
					st = NumberToString1000 (trace_ent.health);
					centerprint7 (self, "\n\n\n\n", trace_ent.netname, "\nFriendly ", cls, "\n", st, " health\n");
					return;
				}
				else
				{
					if ((self.playerclass == BOT_AI_FLAGRUN))
					{
						st = NumberToString1000 (trace_ent.armorvalue);
						centerprint7 (self, "\n\n\n\n", trace_ent.netname, "\nFriendly ", cls, "\n", st, " armor\n");
						return;
					}
				}
				centerprint4 (self, "\n\n\n\n", trace_ent.netname, "\nFriendly ", cls);
				return;
			}
			if ((trace_ent.playerclass == BOT_DEFEND))
			{
				cls = TeamFortress_GetClassName (trace_ent.undercover_skin);
				if (((self.team_no != TF_FLARE_LIT) && (self.team_no == trace_ent.undercover_team)))
				{
					if ((self.playerclass == BOT_AI_GRAPPLE))
					{
						st = NumberToString1000 (trace_ent.health);
						if ((trace_ent.undercover_skin != TF_FLARE_LIT))
						{
							centerprint7 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly ", cls, "\n", st, " health\n");
						}
						else
						{
							centerprint5 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly Spy\n", st, " health\n");
						}
						return;
					}
					else
					{
						if ((self.playerclass == BOT_AI_FLAGRUN))
						{
							st = NumberToString1000 (trace_ent.armorvalue);
							if ((trace_ent.undercover_skin != TF_FLARE_LIT))
							{
								centerprint7 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly ", cls, "\n", st, " armor\n");
							}
							else
							{
								centerprint5 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly Spy\n", st, " armor\n");
							}
							return;
						}
						else
						{
							st = NumberToString1000 (trace_ent.armorvalue);
							if ((trace_ent.undercover_skin != TF_FLARE_LIT))
							{
								centerprint4 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly ", cls);
							}
							else
							{
								centerprint3 (self, "\n\n\n\n", trace_ent.undercover_name, "\nFriendly Spy\n");
							}
							return;
						}
					}
				}
				if ((trace_ent.undercover_name != string_null))
				{
					if ((trace_ent.undercover_skin != TF_FLARE_LIT))
					{
						centerprint4 (self, "\n\n\n\n", trace_ent.undercover_name, "\nEnemy ", cls);
					}
					else
					{
						centerprint3 (self, "\n\n\n\n", trace_ent.undercover_name, "\nEnemy Spy");
					}
				}
				else
				{
					if ((trace_ent.undercover_skin != TF_FLARE_LIT))
					{
						centerprint4 (self, "\n\n\n\n", trace_ent.netname, "\nEnemy ", cls);
					}
					else
					{
						centerprint3 (self, "\n\n\n\n", trace_ent.netname, "\nEnemy Spy");
					}
				}
			}
			else
			{
				cls = TeamFortress_GetClassName (trace_ent.playerclass);
				centerprint4 (self, "\n\n\n\n", trace_ent.netname, "\nEnemy ", cls);
			}
		}
		else
		{
			if ((trace_ent.classname == "building_dispenser"))
			{
				self.StatusRefreshTime = (time + 1.5);
				if ((self == trace_ent.real_owner))
				{
					centerprint (self, "\n\n\n\nYour Dispenser");
				}
				else
				{
					centerprint2 (self, "\n\n\n\nDispenser made by ", trace_ent.real_owner.netname);
				}
			}
			else
			{
				if (((trace_ent.classname == "building_sentrygun") || (trace_ent.classname == "building_sentrygun_base")))
				{
					self.StatusRefreshTime = (time + 1.5);
					if ((self == trace_ent.real_owner))
					{
						centerprint (self, "\n\n\n\nYour SentryGun");
					}
					else
					{
						if (!teamplay)
						{
							centerprint2 (self, "\n\n\n\nSentrygun made by\n", trace_ent.real_owner.netname);
						}
						else
						{
							if (((self.team_no != TF_FLARE_LIT) && (self.team_no == trace_ent.team_no)))
							{
								centerprint2 (self, "\n\n\n\nFriendly Sentrygun made by\n", trace_ent.real_owner.netname);
							}
							else
							{
								centerprint2 (self, "\n\n\n\nEnemy Sentrygun made by\n", trace_ent.real_owner.netname);
							}
						}
					}
				}
			}
		}
	}
};

void () TeamFortress_ReloadCurrentWeapon =
{
	local float rt;
	local entity tWeapon;

	if ((self.current_weapon == 128))
	{
		if ((self.reload_shotgun == TF_FLARE_LIT))
		{
			sprint (self, BOT_FIGHTING, "clip full.\n");
			return;
		}
		if ((self.reload_shotgun < self.ammo_shells))
		{
			Attack_Finished (0.4);
			rt = ((BOT_DEFEND - self.reload_shotgun) / BOT_DEFEND);
			rt = (BOT_FIGHTING - (BOT_FIGHTING * rt));
			self.reload_shotgun = TF_FLARE_LIT;
			if ((self.ammo_shells < BOT_DEFEND))
			{
				self.reload_shotgun = (BOT_DEFEND - self.ammo_shells);
			}
			sprint (self, BOT_FIGHTING, "reloading...\n");
			self.tfstate = (self.tfstate | BOT_FIGHTING);
			tWeapon = spawn ();
			tWeapon.owner = self;
			tWeapon.classname = "timer";
			tWeapon.nextthink = (time + rt);
			tWeapon.think = W_Reload_shotgun;
			self.weaponmodel = "";
			self.weaponframe = TF_FLARE_LIT;
		}
		else
		{
			sprint (self, BOT_FIGHTING, "not enough ammo to reload\n");
		}
	}
	else
	{
		if ((self.current_weapon == FL_ITEM))
		{
			if ((self.reload_super_shotgun == TF_FLARE_LIT))
			{
				sprint (self, BOT_FIGHTING, "clip full.\n");
				return;
			}
			if ((self.reload_super_shotgun < self.ammo_shells))
			{
				Attack_Finished (0.7);
				rt = ((BOT_RESUPPLYING - self.reload_super_shotgun) / BOT_RESUPPLYING);
				rt = (BOT_AI_FOLLOW - (BOT_AI_FOLLOW * rt));
				self.reload_super_shotgun = TF_FLARE_LIT;
				if ((self.ammo_shells < BOT_RESUPPLYING))
				{
					self.reload_super_shotgun = (BOT_RESUPPLYING - self.ammo_shells);
				}
				sprint (self, BOT_FIGHTING, "reloading...\n");
				self.tfstate = (self.tfstate | BOT_FIGHTING);
				tWeapon = spawn ();
				tWeapon.owner = self;
				tWeapon.classname = "timer";
				tWeapon.nextthink = (time + rt);
				tWeapon.think = W_Reload_super_shotgun;
				self.weaponmodel = "";
				self.weaponframe = TF_FLARE_LIT;
			}
			else
			{
				sprint (self, BOT_FIGHTING, "not enough ammo to reload\n");
			}
		}
		else
		{
			if ((self.current_weapon == FL_WATERJUMP))
			{
				if ((self.reload_grenade_launcher == TF_FLARE_LIT))
				{
					sprint (self, BOT_FIGHTING, "clip full.\n");
					return;
				}
				if ((self.reload_grenade_launcher < self.ammo_rockets))
				{
					Attack_Finished (0.6);
					rt = ((BOT_AI_FLEE - self.reload_grenade_launcher) / BOT_AI_FLEE);
					rt = (BOT_MOVING - (BOT_MOVING * rt));
					self.reload_grenade_launcher = TF_FLARE_LIT;
					if ((self.ammo_rockets < BOT_AI_FLEE))
					{
						self.reload_grenade_launcher = (BOT_AI_FLEE - self.ammo_rockets);
					}
					sprint (self, BOT_FIGHTING, "reloading...\n");
					self.tfstate = (self.tfstate | BOT_FIGHTING);
					tWeapon = spawn ();
					tWeapon.owner = self;
					tWeapon.classname = "timer";
					tWeapon.nextthink = (time + rt);
					tWeapon.think = W_Reload_grenade_launcher;
					self.weaponmodel = "";
					self.weaponframe = TF_FLARE_LIT;
				}
				else
				{
					sprint (self, BOT_FIGHTING, "not enough ammo to reload\n");
				}
			}
			else
			{
				if ((self.current_weapon == 8192))
				{
					if ((self.reload_rocket_launcher == TF_FLARE_LIT))
					{
						sprint (self, BOT_FIGHTING, "clip full.\n");
						return;
					}
					if ((self.reload_rocket_launcher < self.ammo_rockets))
					{
						Attack_Finished (0.8);
						rt = ((BOT_MOVING - self.reload_rocket_launcher) / BOT_MOVING);
						rt = (BOT_AI_GRAPPLE - (BOT_AI_GRAPPLE * rt));
						self.reload_rocket_launcher = TF_FLARE_LIT;
						if ((self.ammo_rockets < BOT_MOVING))
						{
							self.reload_rocket_launcher = (BOT_MOVING - self.ammo_rockets);
						}
						sprint (self, BOT_FIGHTING, "reloading...\n");
						self.tfstate = (self.tfstate | BOT_FIGHTING);
						tWeapon = spawn ();
						tWeapon.owner = self;
						tWeapon.classname = "timer";
						tWeapon.nextthink = (time + rt);
						tWeapon.think = W_Reload_rocket_launcher;
						self.weaponmodel = "";
						self.weaponframe = TF_FLARE_LIT;
					}
				}
			}
		}
	}
};
